// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package lb_clmm

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_BinArray:
		value := new(BinArray)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as BinArray: %w", err)
		}
		return value, nil
	case Account_BinArrayBitmapExtension:
		value := new(BinArrayBitmapExtension)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as BinArrayBitmapExtension: %w", err)
		}
		return value, nil
	case Account_ClaimFeeOperator:
		value := new(ClaimFeeOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ClaimFeeOperator: %w", err)
		}
		return value, nil
	case Account_DummyZcAccount:
		value := new(DummyZcAccount)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as DummyZcAccount: %w", err)
		}
		return value, nil
	case Account_LbPair:
		value := new(LbPair)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as LbPair: %w", err)
		}
		return value, nil
	case Account_Oracle:
		value := new(Oracle)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Oracle: %w", err)
		}
		return value, nil
	case Account_Position:
		value := new(Position)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Position: %w", err)
		}
		return value, nil
	case Account_PositionV2:
		value := new(PositionV2)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PositionV2: %w", err)
		}
		return value, nil
	case Account_PresetParameter:
		value := new(PresetParameter)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PresetParameter: %w", err)
		}
		return value, nil
	case Account_PresetParameter2:
		value := new(PresetParameter2)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PresetParameter2: %w", err)
		}
		return value, nil
	case Account_TokenBadge:
		value := new(TokenBadge)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as TokenBadge: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_BinArray(accountData []byte) (*BinArray, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_BinArray {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_BinArray, binary.FormatDiscriminator(discriminator))
	}
	acc := new(BinArray)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type BinArray: %w", err)
	}
	return acc, nil
}

func ParseAccount_BinArrayBitmapExtension(accountData []byte) (*BinArrayBitmapExtension, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_BinArrayBitmapExtension {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_BinArrayBitmapExtension, binary.FormatDiscriminator(discriminator))
	}
	acc := new(BinArrayBitmapExtension)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type BinArrayBitmapExtension: %w", err)
	}
	return acc, nil
}

func ParseAccount_ClaimFeeOperator(accountData []byte) (*ClaimFeeOperator, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ClaimFeeOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ClaimFeeOperator, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ClaimFeeOperator)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ClaimFeeOperator: %w", err)
	}
	return acc, nil
}

func ParseAccount_DummyZcAccount(accountData []byte) (*DummyZcAccount, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_DummyZcAccount {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_DummyZcAccount, binary.FormatDiscriminator(discriminator))
	}
	acc := new(DummyZcAccount)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type DummyZcAccount: %w", err)
	}
	return acc, nil
}

func ParseAccount_LbPair(accountData []byte) (*LbPair, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_LbPair {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_LbPair, binary.FormatDiscriminator(discriminator))
	}
	acc := new(LbPair)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type LbPair: %w", err)
	}
	return acc, nil
}

func ParseAccount_Oracle(accountData []byte) (*Oracle, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Oracle {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Oracle, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Oracle)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Oracle: %w", err)
	}
	return acc, nil
}

func ParseAccount_Position(accountData []byte) (*Position, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Position {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Position, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Position)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Position: %w", err)
	}
	return acc, nil
}

func ParseAccount_PositionV2(accountData []byte) (*PositionV2, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PositionV2 {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PositionV2, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PositionV2)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PositionV2: %w", err)
	}
	return acc, nil
}

func ParseAccount_PresetParameter(accountData []byte) (*PresetParameter, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PresetParameter {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PresetParameter, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PresetParameter)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PresetParameter: %w", err)
	}
	return acc, nil
}

func ParseAccount_PresetParameter2(accountData []byte) (*PresetParameter2, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PresetParameter2 {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PresetParameter2, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PresetParameter2)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PresetParameter2: %w", err)
	}
	return acc, nil
}

func ParseAccount_TokenBadge(accountData []byte) (*TokenBadge, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_TokenBadge {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_TokenBadge, binary.FormatDiscriminator(discriminator))
	}
	acc := new(TokenBadge)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type TokenBadge: %w", err)
	}
	return acc, nil
}
