// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package lb_clmm

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// The "isAccountsType" interface for the "AccountsType" complex enum.
type AccountsType interface {
	isAccountsType()
}

type accountsTypeEnumContainer struct {
	Enum                    binary.BorshEnum `bin:"enum"`
	TransferHookX           AccountsType_TransferHookX
	TransferHookY           AccountsType_TransferHookY
	TransferHookReward      AccountsType_TransferHookReward
	TransferHookMultiReward AccountsType_TransferHookMultiReward
}

func DecodeAccountsType(decoder *binary.Decoder) (AccountsType, error) {
	{
		tmp := new(accountsTypeEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing AccountsType: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return (*AccountsType_TransferHookX)(&tmp.Enum), nil
		case 1:
			return (*AccountsType_TransferHookY)(&tmp.Enum), nil
		case 2:
			return (*AccountsType_TransferHookReward)(&tmp.Enum), nil
		case 3:
			return &tmp.TransferHookMultiReward, nil
		default:
			return nil, fmt.Errorf("AccountsType: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeAccountsType(encoder *binary.Encoder, value AccountsType) error {
	{
		tmp := accountsTypeEnumContainer{}
		switch realvalue := value.(type) {
		case *AccountsType_TransferHookX:
			tmp.Enum = 0
			tmp.TransferHookX = *realvalue
		case *AccountsType_TransferHookY:
			tmp.Enum = 1
			tmp.TransferHookY = *realvalue
		case *AccountsType_TransferHookReward:
			tmp.Enum = 2
			tmp.TransferHookReward = *realvalue
		case *AccountsType_TransferHookMultiReward:
			tmp.Enum = 3
			tmp.TransferHookMultiReward = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

type AccountsType_TransferHookX uint8

func (obj AccountsType_TransferHookX) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *AccountsType_TransferHookX) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *AccountsType_TransferHookX) isAccountsType() {}

type AccountsType_TransferHookY uint8

func (obj AccountsType_TransferHookY) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *AccountsType_TransferHookY) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *AccountsType_TransferHookY) isAccountsType() {}

type AccountsType_TransferHookReward uint8

func (obj AccountsType_TransferHookReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *AccountsType_TransferHookReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *AccountsType_TransferHookReward) isAccountsType() {}

// Variant "TransferHookMultiReward" of enum "AccountsType"
type AccountsType_TransferHookMultiReward struct {
	V0 uint8 `json:"v0"`
}

func (obj AccountsType_TransferHookMultiReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj AccountsType_TransferHookMultiReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AccountsType_TransferHookMultiReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AccountsType_TransferHookMultiReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *AccountsType_TransferHookMultiReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AccountsType_TransferHookMultiReward: %w", err)
	}
	return nil
}

func UnmarshalAccountsType_TransferHookMultiReward(buf []byte) (*AccountsType_TransferHookMultiReward, error) {
	obj := new(AccountsType_TransferHookMultiReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *AccountsType_TransferHookMultiReward) isAccountsType() {}

// Type of the activation
type ActivationType binary.BorshEnum

const (
	ActivationType_Slot ActivationType = iota
	ActivationType_Timestamp
)

func (value ActivationType) String() string {
	switch value {
	case ActivationType_Slot:
		return "Slot"
	case ActivationType_Timestamp:
		return "Timestamp"
	default:
		return ""
	}
}

type AddLiquidity struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	From        solanago.PublicKey `json:"from"`
	Position    solanago.PublicKey `json:"position"`
	Amounts     [2]uint64          `json:"amounts"`
	ActiveBinId int32              `json:"activeBinId"`
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `From`:
	err = encoder.Encode(obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Amounts`:
	err = encoder.Encode(obj.Amounts)
	if err != nil {
		return errors.NewField("Amounts", err)
	}
	// Serialize `ActiveBinId`:
	err = encoder.Encode(obj.ActiveBinId)
	if err != nil {
		return errors.NewField("ActiveBinId", err)
	}
	return nil
}

func (obj AddLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Amounts`:
	err = decoder.Decode(&obj.Amounts)
	if err != nil {
		return errors.NewField("Amounts", err)
	}
	// Deserialize `ActiveBinId`:
	err = decoder.Decode(&obj.ActiveBinId)
	if err != nil {
		return errors.NewField("ActiveBinId", err)
	}
	return nil
}

func (obj *AddLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidity: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidity(buf []byte) (*AddLiquidity, error) {
	obj := new(AddLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddLiquidityParams struct {
	MinDeltaId       int32     `json:"minDeltaId"`
	MaxDeltaId       int32     `json:"maxDeltaId"`
	X0               uint64    `json:"x0"`
	Y0               uint64    `json:"y0"`
	DeltaX           uint64    `json:"deltaX"`
	DeltaY           uint64    `json:"deltaY"`
	BitFlag          uint8     `json:"bitFlag"`
	FavorXInActiveId bool      `json:"favorXInActiveId"`
	Padding          [16]uint8 `json:"padding"`
}

func (obj AddLiquidityParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MinDeltaId`:
	err = encoder.Encode(obj.MinDeltaId)
	if err != nil {
		return errors.NewField("MinDeltaId", err)
	}
	// Serialize `MaxDeltaId`:
	err = encoder.Encode(obj.MaxDeltaId)
	if err != nil {
		return errors.NewField("MaxDeltaId", err)
	}
	// Serialize `X0`:
	err = encoder.Encode(obj.X0)
	if err != nil {
		return errors.NewField("X0", err)
	}
	// Serialize `Y0`:
	err = encoder.Encode(obj.Y0)
	if err != nil {
		return errors.NewField("Y0", err)
	}
	// Serialize `DeltaX`:
	err = encoder.Encode(obj.DeltaX)
	if err != nil {
		return errors.NewField("DeltaX", err)
	}
	// Serialize `DeltaY`:
	err = encoder.Encode(obj.DeltaY)
	if err != nil {
		return errors.NewField("DeltaY", err)
	}
	// Serialize `BitFlag`:
	err = encoder.Encode(obj.BitFlag)
	if err != nil {
		return errors.NewField("BitFlag", err)
	}
	// Serialize `FavorXInActiveId`:
	err = encoder.Encode(obj.FavorXInActiveId)
	if err != nil {
		return errors.NewField("FavorXInActiveId", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj AddLiquidityParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidityParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidityParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MinDeltaId`:
	err = decoder.Decode(&obj.MinDeltaId)
	if err != nil {
		return errors.NewField("MinDeltaId", err)
	}
	// Deserialize `MaxDeltaId`:
	err = decoder.Decode(&obj.MaxDeltaId)
	if err != nil {
		return errors.NewField("MaxDeltaId", err)
	}
	// Deserialize `X0`:
	err = decoder.Decode(&obj.X0)
	if err != nil {
		return errors.NewField("X0", err)
	}
	// Deserialize `Y0`:
	err = decoder.Decode(&obj.Y0)
	if err != nil {
		return errors.NewField("Y0", err)
	}
	// Deserialize `DeltaX`:
	err = decoder.Decode(&obj.DeltaX)
	if err != nil {
		return errors.NewField("DeltaX", err)
	}
	// Deserialize `DeltaY`:
	err = decoder.Decode(&obj.DeltaY)
	if err != nil {
		return errors.NewField("DeltaY", err)
	}
	// Deserialize `BitFlag`:
	err = decoder.Decode(&obj.BitFlag)
	if err != nil {
		return errors.NewField("BitFlag", err)
	}
	// Deserialize `FavorXInActiveId`:
	err = decoder.Decode(&obj.FavorXInActiveId)
	if err != nil {
		return errors.NewField("FavorXInActiveId", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *AddLiquidityParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidityParams: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidityParams(buf []byte) (*AddLiquidityParams, error) {
	obj := new(AddLiquidityParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddLiquiditySingleSidePreciseParameter struct {
	Bins                 []CompressedBinDepositAmount `json:"bins"`
	DecompressMultiplier uint64                       `json:"decompressMultiplier"`
}

func (obj AddLiquiditySingleSidePreciseParameter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Bins`:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return errors.NewField("Bins", err)
	}
	// Serialize `DecompressMultiplier`:
	err = encoder.Encode(obj.DecompressMultiplier)
	if err != nil {
		return errors.NewField("DecompressMultiplier", err)
	}
	return nil
}

func (obj AddLiquiditySingleSidePreciseParameter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquiditySingleSidePreciseParameter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquiditySingleSidePreciseParameter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return errors.NewField("Bins", err)
	}
	// Deserialize `DecompressMultiplier`:
	err = decoder.Decode(&obj.DecompressMultiplier)
	if err != nil {
		return errors.NewField("DecompressMultiplier", err)
	}
	return nil
}

func (obj *AddLiquiditySingleSidePreciseParameter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquiditySingleSidePreciseParameter: %w", err)
	}
	return nil
}

func UnmarshalAddLiquiditySingleSidePreciseParameter(buf []byte) (*AddLiquiditySingleSidePreciseParameter, error) {
	obj := new(AddLiquiditySingleSidePreciseParameter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddLiquiditySingleSidePreciseParameter2 struct {
	Bins                 []CompressedBinDepositAmount `json:"bins"`
	DecompressMultiplier uint64                       `json:"decompressMultiplier"`
	MaxAmount            uint64                       `json:"maxAmount"`
}

func (obj AddLiquiditySingleSidePreciseParameter2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Bins`:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return errors.NewField("Bins", err)
	}
	// Serialize `DecompressMultiplier`:
	err = encoder.Encode(obj.DecompressMultiplier)
	if err != nil {
		return errors.NewField("DecompressMultiplier", err)
	}
	// Serialize `MaxAmount`:
	err = encoder.Encode(obj.MaxAmount)
	if err != nil {
		return errors.NewField("MaxAmount", err)
	}
	return nil
}

func (obj AddLiquiditySingleSidePreciseParameter2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquiditySingleSidePreciseParameter2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquiditySingleSidePreciseParameter2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return errors.NewField("Bins", err)
	}
	// Deserialize `DecompressMultiplier`:
	err = decoder.Decode(&obj.DecompressMultiplier)
	if err != nil {
		return errors.NewField("DecompressMultiplier", err)
	}
	// Deserialize `MaxAmount`:
	err = decoder.Decode(&obj.MaxAmount)
	if err != nil {
		return errors.NewField("MaxAmount", err)
	}
	return nil
}

func (obj *AddLiquiditySingleSidePreciseParameter2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquiditySingleSidePreciseParameter2: %w", err)
	}
	return nil
}

func UnmarshalAddLiquiditySingleSidePreciseParameter2(buf []byte) (*AddLiquiditySingleSidePreciseParameter2, error) {
	obj := new(AddLiquiditySingleSidePreciseParameter2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BaseFeeParameter struct {
	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16 `json:"protocolShare"`

	// Base factor for base fee rate
	BaseFactor uint16 `json:"baseFactor"`

	// Base fee power factor
	BaseFeePowerFactor uint8 `json:"baseFeePowerFactor"`
}

func (obj BaseFeeParameter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `BaseFeePowerFactor`:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	return nil
}

func (obj BaseFeeParameter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BaseFeeParameter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BaseFeeParameter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	return nil
}

func (obj *BaseFeeParameter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BaseFeeParameter: %w", err)
	}
	return nil
}

func UnmarshalBaseFeeParameter(buf []byte) (*BaseFeeParameter, error) {
	obj := new(BaseFeeParameter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Bin struct {
	// Amount of token X in the bin. This already excluded protocol fees.
	AmountX uint64 `json:"amountX"`

	// Amount of token Y in the bin. This already excluded protocol fees.
	AmountY uint64 `json:"amountY"`

	// Bin price
	Price binary.Uint128 `json:"price"`

	// Liquidities of the bin. This is the same as LP mint supply. q-number
	LiquiditySupply binary.Uint128 `json:"liquiditySupply"`

	// reward_a_per_token_stored
	RewardPerTokenStored [2]binary.Uint128 `json:"rewardPerTokenStored"`

	// Swap fee amount of token X per liquidity deposited.
	FeeAmountXPerTokenStored binary.Uint128 `json:"feeAmountXPerTokenStored"`

	// Swap fee amount of token Y per liquidity deposited.
	FeeAmountYPerTokenStored binary.Uint128 `json:"feeAmountYPerTokenStored"`

	// Total token X swap into the bin. Only used for tracking purpose.
	AmountXIn binary.Uint128 `json:"amountXIn"`

	// Total token Y swap into he bin. Only used for tracking purpose.
	AmountYIn binary.Uint128 `json:"amountYIn"`
}

func (obj Bin) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountX`:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Serialize `AmountY`:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `LiquiditySupply`:
	err = encoder.Encode(obj.LiquiditySupply)
	if err != nil {
		return errors.NewField("LiquiditySupply", err)
	}
	// Serialize `RewardPerTokenStored`:
	err = encoder.Encode(obj.RewardPerTokenStored)
	if err != nil {
		return errors.NewField("RewardPerTokenStored", err)
	}
	// Serialize `FeeAmountXPerTokenStored`:
	err = encoder.Encode(obj.FeeAmountXPerTokenStored)
	if err != nil {
		return errors.NewField("FeeAmountXPerTokenStored", err)
	}
	// Serialize `FeeAmountYPerTokenStored`:
	err = encoder.Encode(obj.FeeAmountYPerTokenStored)
	if err != nil {
		return errors.NewField("FeeAmountYPerTokenStored", err)
	}
	// Serialize `AmountXIn`:
	err = encoder.Encode(obj.AmountXIn)
	if err != nil {
		return errors.NewField("AmountXIn", err)
	}
	// Serialize `AmountYIn`:
	err = encoder.Encode(obj.AmountYIn)
	if err != nil {
		return errors.NewField("AmountYIn", err)
	}
	return nil
}

func (obj Bin) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Bin: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Bin) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `LiquiditySupply`:
	err = decoder.Decode(&obj.LiquiditySupply)
	if err != nil {
		return errors.NewField("LiquiditySupply", err)
	}
	// Deserialize `RewardPerTokenStored`:
	err = decoder.Decode(&obj.RewardPerTokenStored)
	if err != nil {
		return errors.NewField("RewardPerTokenStored", err)
	}
	// Deserialize `FeeAmountXPerTokenStored`:
	err = decoder.Decode(&obj.FeeAmountXPerTokenStored)
	if err != nil {
		return errors.NewField("FeeAmountXPerTokenStored", err)
	}
	// Deserialize `FeeAmountYPerTokenStored`:
	err = decoder.Decode(&obj.FeeAmountYPerTokenStored)
	if err != nil {
		return errors.NewField("FeeAmountYPerTokenStored", err)
	}
	// Deserialize `AmountXIn`:
	err = decoder.Decode(&obj.AmountXIn)
	if err != nil {
		return errors.NewField("AmountXIn", err)
	}
	// Deserialize `AmountYIn`:
	err = decoder.Decode(&obj.AmountYIn)
	if err != nil {
		return errors.NewField("AmountYIn", err)
	}
	return nil
}

func (obj *Bin) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Bin: %w", err)
	}
	return nil
}

func UnmarshalBin(buf []byte) (*Bin, error) {
	obj := new(Bin)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// An account to contain a range of bin. For example: Bin 100 <-> 200.
// For example:
// BinArray index: 0 contains bin 0 <-> 599
// index: 2 contains bin 600 <-> 1199, ...
type BinArray struct {
	Index int64 `json:"index"`

	// Version of binArray
	Version uint8              `json:"version"`
	Padding [7]uint8           `json:"padding"`
	LbPair  solanago.PublicKey `json:"lbPair"`
	Bins    [70]Bin            `json:"bins"`
}

func (obj BinArray) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Bins`:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return errors.NewField("Bins", err)
	}
	return nil
}

func (obj BinArray) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BinArray: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BinArray) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return errors.NewField("Bins", err)
	}
	return nil
}

func (obj *BinArray) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BinArray: %w", err)
	}
	return nil
}

func UnmarshalBinArray(buf []byte) (*BinArray, error) {
	obj := new(BinArray)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BinArrayBitmapExtension struct {
	LbPair solanago.PublicKey `json:"lbPair"`

	// Packed initialized bin array state for start_bin_index is positive
	PositiveBinArrayBitmap [12][8]uint64 `json:"positiveBinArrayBitmap"`

	// Packed initialized bin array state for start_bin_index is negative
	NegativeBinArrayBitmap [12][8]uint64 `json:"negativeBinArrayBitmap"`
}

func (obj BinArrayBitmapExtension) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `PositiveBinArrayBitmap`:
	err = encoder.Encode(obj.PositiveBinArrayBitmap)
	if err != nil {
		return errors.NewField("PositiveBinArrayBitmap", err)
	}
	// Serialize `NegativeBinArrayBitmap`:
	err = encoder.Encode(obj.NegativeBinArrayBitmap)
	if err != nil {
		return errors.NewField("NegativeBinArrayBitmap", err)
	}
	return nil
}

func (obj BinArrayBitmapExtension) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BinArrayBitmapExtension: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BinArrayBitmapExtension) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `PositiveBinArrayBitmap`:
	err = decoder.Decode(&obj.PositiveBinArrayBitmap)
	if err != nil {
		return errors.NewField("PositiveBinArrayBitmap", err)
	}
	// Deserialize `NegativeBinArrayBitmap`:
	err = decoder.Decode(&obj.NegativeBinArrayBitmap)
	if err != nil {
		return errors.NewField("NegativeBinArrayBitmap", err)
	}
	return nil
}

func (obj *BinArrayBitmapExtension) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BinArrayBitmapExtension: %w", err)
	}
	return nil
}

func UnmarshalBinArrayBitmapExtension(buf []byte) (*BinArrayBitmapExtension, error) {
	obj := new(BinArrayBitmapExtension)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BinLiquidityDistribution struct {
	// Define the bin ID wish to deposit to.
	BinId int32 `json:"binId"`

	// DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin.
	DistributionX uint16 `json:"distributionX"`

	// DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin.
	DistributionY uint16 `json:"distributionY"`
}

func (obj BinLiquidityDistribution) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinId`:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Serialize `DistributionX`:
	err = encoder.Encode(obj.DistributionX)
	if err != nil {
		return errors.NewField("DistributionX", err)
	}
	// Serialize `DistributionY`:
	err = encoder.Encode(obj.DistributionY)
	if err != nil {
		return errors.NewField("DistributionY", err)
	}
	return nil
}

func (obj BinLiquidityDistribution) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BinLiquidityDistribution: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BinLiquidityDistribution) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Deserialize `DistributionX`:
	err = decoder.Decode(&obj.DistributionX)
	if err != nil {
		return errors.NewField("DistributionX", err)
	}
	// Deserialize `DistributionY`:
	err = decoder.Decode(&obj.DistributionY)
	if err != nil {
		return errors.NewField("DistributionY", err)
	}
	return nil
}

func (obj *BinLiquidityDistribution) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BinLiquidityDistribution: %w", err)
	}
	return nil
}

func UnmarshalBinLiquidityDistribution(buf []byte) (*BinLiquidityDistribution, error) {
	obj := new(BinLiquidityDistribution)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BinLiquidityDistributionByWeight struct {
	// Define the bin ID wish to deposit to.
	BinId int32 `json:"binId"`

	// weight of liquidity distributed for this bin id
	Weight uint16 `json:"weight"`
}

func (obj BinLiquidityDistributionByWeight) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinId`:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Serialize `Weight`:
	err = encoder.Encode(obj.Weight)
	if err != nil {
		return errors.NewField("Weight", err)
	}
	return nil
}

func (obj BinLiquidityDistributionByWeight) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BinLiquidityDistributionByWeight: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BinLiquidityDistributionByWeight) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Deserialize `Weight`:
	err = decoder.Decode(&obj.Weight)
	if err != nil {
		return errors.NewField("Weight", err)
	}
	return nil
}

func (obj *BinLiquidityDistributionByWeight) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BinLiquidityDistributionByWeight: %w", err)
	}
	return nil
}

func UnmarshalBinLiquidityDistributionByWeight(buf []byte) (*BinLiquidityDistributionByWeight, error) {
	obj := new(BinLiquidityDistributionByWeight)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type BinLiquidityReduction struct {
	BinId       int32  `json:"binId"`
	BpsToRemove uint16 `json:"bpsToRemove"`
}

func (obj BinLiquidityReduction) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinId`:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Serialize `BpsToRemove`:
	err = encoder.Encode(obj.BpsToRemove)
	if err != nil {
		return errors.NewField("BpsToRemove", err)
	}
	return nil
}

func (obj BinLiquidityReduction) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding BinLiquidityReduction: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *BinLiquidityReduction) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Deserialize `BpsToRemove`:
	err = decoder.Decode(&obj.BpsToRemove)
	if err != nil {
		return errors.NewField("BpsToRemove", err)
	}
	return nil
}

func (obj *BinLiquidityReduction) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling BinLiquidityReduction: %w", err)
	}
	return nil
}

func UnmarshalBinLiquidityReduction(buf []byte) (*BinLiquidityReduction, error) {
	obj := new(BinLiquidityReduction)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClaimFee struct {
	LbPair   solanago.PublicKey `json:"lbPair"`
	Position solanago.PublicKey `json:"position"`
	Owner    solanago.PublicKey `json:"owner"`
	FeeX     uint64             `json:"feeX"`
	FeeY     uint64             `json:"feeY"`
}

func (obj ClaimFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `FeeX`:
	err = encoder.Encode(obj.FeeX)
	if err != nil {
		return errors.NewField("FeeX", err)
	}
	// Serialize `FeeY`:
	err = encoder.Encode(obj.FeeY)
	if err != nil {
		return errors.NewField("FeeY", err)
	}
	return nil
}

func (obj ClaimFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `FeeX`:
	err = decoder.Decode(&obj.FeeX)
	if err != nil {
		return errors.NewField("FeeX", err)
	}
	// Deserialize `FeeY`:
	err = decoder.Decode(&obj.FeeY)
	if err != nil {
		return errors.NewField("FeeY", err)
	}
	return nil
}

func (obj *ClaimFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimFee: %w", err)
	}
	return nil
}

func UnmarshalClaimFee(buf []byte) (*ClaimFee, error) {
	obj := new(ClaimFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Parameter that set by the protocol
type ClaimFeeOperator struct {
	// operator
	Operator solanago.PublicKey `json:"operator"`

	// Reserve
	Padding [128]uint8 `json:"padding"`
}

func (obj ClaimFeeOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ClaimFeeOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimFeeOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimFeeOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ClaimFeeOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimFeeOperator: %w", err)
	}
	return nil
}

func UnmarshalClaimFeeOperator(buf []byte) (*ClaimFeeOperator, error) {
	obj := new(ClaimFeeOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClaimReward struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	Position    solanago.PublicKey `json:"position"`
	Owner       solanago.PublicKey `json:"owner"`
	RewardIndex uint64             `json:"rewardIndex"`
	TotalReward uint64             `json:"totalReward"`
}

func (obj ClaimReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `TotalReward`:
	err = encoder.Encode(obj.TotalReward)
	if err != nil {
		return errors.NewField("TotalReward", err)
	}
	return nil
}

func (obj ClaimReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `TotalReward`:
	err = decoder.Decode(&obj.TotalReward)
	if err != nil {
		return errors.NewField("TotalReward", err)
	}
	return nil
}

func (obj *ClaimReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimReward: %w", err)
	}
	return nil
}

func UnmarshalClaimReward(buf []byte) (*ClaimReward, error) {
	obj := new(ClaimReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CompositionFee struct {
	From                    solanago.PublicKey `json:"from"`
	BinId                   int16              `json:"binId"`
	TokenXFeeAmount         uint64             `json:"tokenXFeeAmount"`
	TokenYFeeAmount         uint64             `json:"tokenYFeeAmount"`
	ProtocolTokenXFeeAmount uint64             `json:"protocolTokenXFeeAmount"`
	ProtocolTokenYFeeAmount uint64             `json:"protocolTokenYFeeAmount"`
}

func (obj CompositionFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `From`:
	err = encoder.Encode(obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Serialize `BinId`:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Serialize `TokenXFeeAmount`:
	err = encoder.Encode(obj.TokenXFeeAmount)
	if err != nil {
		return errors.NewField("TokenXFeeAmount", err)
	}
	// Serialize `TokenYFeeAmount`:
	err = encoder.Encode(obj.TokenYFeeAmount)
	if err != nil {
		return errors.NewField("TokenYFeeAmount", err)
	}
	// Serialize `ProtocolTokenXFeeAmount`:
	err = encoder.Encode(obj.ProtocolTokenXFeeAmount)
	if err != nil {
		return errors.NewField("ProtocolTokenXFeeAmount", err)
	}
	// Serialize `ProtocolTokenYFeeAmount`:
	err = encoder.Encode(obj.ProtocolTokenYFeeAmount)
	if err != nil {
		return errors.NewField("ProtocolTokenYFeeAmount", err)
	}
	return nil
}

func (obj CompositionFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CompositionFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CompositionFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Deserialize `TokenXFeeAmount`:
	err = decoder.Decode(&obj.TokenXFeeAmount)
	if err != nil {
		return errors.NewField("TokenXFeeAmount", err)
	}
	// Deserialize `TokenYFeeAmount`:
	err = decoder.Decode(&obj.TokenYFeeAmount)
	if err != nil {
		return errors.NewField("TokenYFeeAmount", err)
	}
	// Deserialize `ProtocolTokenXFeeAmount`:
	err = decoder.Decode(&obj.ProtocolTokenXFeeAmount)
	if err != nil {
		return errors.NewField("ProtocolTokenXFeeAmount", err)
	}
	// Deserialize `ProtocolTokenYFeeAmount`:
	err = decoder.Decode(&obj.ProtocolTokenYFeeAmount)
	if err != nil {
		return errors.NewField("ProtocolTokenYFeeAmount", err)
	}
	return nil
}

func (obj *CompositionFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CompositionFee: %w", err)
	}
	return nil
}

func UnmarshalCompositionFee(buf []byte) (*CompositionFee, error) {
	obj := new(CompositionFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CompressedBinDepositAmount struct {
	BinId  int32  `json:"binId"`
	Amount uint32 `json:"amount"`
}

func (obj CompressedBinDepositAmount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinId`:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj CompressedBinDepositAmount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CompressedBinDepositAmount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CompressedBinDepositAmount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return errors.NewField("BinId", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *CompressedBinDepositAmount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CompressedBinDepositAmount: %w", err)
	}
	return nil
}

func UnmarshalCompressedBinDepositAmount(buf []byte) (*CompressedBinDepositAmount, error) {
	obj := new(CompressedBinDepositAmount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CustomizableParams struct {
	// Pool price
	ActiveId int32 `json:"activeId"`

	// Bin step
	BinStep uint16 `json:"binStep"`

	// Base factor
	BaseFactor uint16 `json:"baseFactor"`

	// Activation type. 0 = Slot, 1 = Time. Check ActivationType enum
	ActivationType uint8 `json:"activationType"`

	// Whether the pool has an alpha vault
	HasAlphaVault bool `json:"hasAlphaVault"`

	// Decide when does the pool start trade. None = Now
	ActivationPoint *uint64 `bin:"optional" json:"activationPoint,omitempty"`

	// Pool creator have permission to enable/disable pool with restricted program validation. Only applicable for customizable permissionless pool.
	CreatorPoolOnOffControl bool `json:"creatorPoolOnOffControl"`

	// Base fee power factor
	BaseFeePowerFactor uint8 `json:"baseFeePowerFactor"`

	// Padding, for future use
	Padding [62]uint8 `json:"padding"`
}

func (obj CustomizableParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `HasAlphaVault`:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return errors.NewField("HasAlphaVault", err)
	}
	// Serialize `ActivationPoint` (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ActivationPoint", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	// Serialize `CreatorPoolOnOffControl`:
	err = encoder.Encode(obj.CreatorPoolOnOffControl)
	if err != nil {
		return errors.NewField("CreatorPoolOnOffControl", err)
	}
	// Serialize `BaseFeePowerFactor`:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj CustomizableParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CustomizableParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CustomizableParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return errors.NewField("HasAlphaVault", err)
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ActivationPoint", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return errors.NewField("ActivationPoint", err)
			}
		}
	}
	// Deserialize `CreatorPoolOnOffControl`:
	err = decoder.Decode(&obj.CreatorPoolOnOffControl)
	if err != nil {
		return errors.NewField("CreatorPoolOnOffControl", err)
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *CustomizableParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CustomizableParams: %w", err)
	}
	return nil
}

func UnmarshalCustomizableParams(buf []byte) (*CustomizableParams, error) {
	obj := new(CustomizableParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DecreasePositionLength struct {
	LbPair         solanago.PublicKey `json:"lbPair"`
	Position       solanago.PublicKey `json:"position"`
	Owner          solanago.PublicKey `json:"owner"`
	LengthToRemove uint16             `json:"lengthToRemove"`
	Side           uint8              `json:"side"`
}

func (obj DecreasePositionLength) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `LengthToRemove`:
	err = encoder.Encode(obj.LengthToRemove)
	if err != nil {
		return errors.NewField("LengthToRemove", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	return nil
}

func (obj DecreasePositionLength) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DecreasePositionLength: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DecreasePositionLength) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `LengthToRemove`:
	err = decoder.Decode(&obj.LengthToRemove)
	if err != nil {
		return errors.NewField("LengthToRemove", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	return nil
}

func (obj *DecreasePositionLength) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DecreasePositionLength: %w", err)
	}
	return nil
}

func UnmarshalDecreasePositionLength(buf []byte) (*DecreasePositionLength, error) {
	obj := new(DecreasePositionLength)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DummyIx struct {
	PairStatus       PairStatus        `json:"pairStatus"`
	PairType         PairType          `json:"pairType"`
	ActivationType   ActivationType    `json:"activationType"`
	TokenProgramFlag TokenProgramFlags `json:"tokenProgramFlag"`
	ResizeSide       ResizeSide        `json:"resizeSide"`
	Rounding         Rounding          `json:"rounding"`
}

func (obj DummyIx) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PairStatus`:
	err = encoder.Encode(obj.PairStatus)
	if err != nil {
		return errors.NewField("PairStatus", err)
	}
	// Serialize `PairType`:
	err = encoder.Encode(obj.PairType)
	if err != nil {
		return errors.NewField("PairType", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `TokenProgramFlag`:
	err = encoder.Encode(obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Serialize `ResizeSide`:
	err = encoder.Encode(obj.ResizeSide)
	if err != nil {
		return errors.NewField("ResizeSide", err)
	}
	// Serialize `Rounding`:
	err = encoder.Encode(obj.Rounding)
	if err != nil {
		return errors.NewField("Rounding", err)
	}
	return nil
}

func (obj DummyIx) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DummyIx: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DummyIx) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PairStatus`:
	err = decoder.Decode(&obj.PairStatus)
	if err != nil {
		return errors.NewField("PairStatus", err)
	}
	// Deserialize `PairType`:
	err = decoder.Decode(&obj.PairType)
	if err != nil {
		return errors.NewField("PairType", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `TokenProgramFlag`:
	err = decoder.Decode(&obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Deserialize `ResizeSide`:
	err = decoder.Decode(&obj.ResizeSide)
	if err != nil {
		return errors.NewField("ResizeSide", err)
	}
	// Deserialize `Rounding`:
	err = decoder.Decode(&obj.Rounding)
	if err != nil {
		return errors.NewField("Rounding", err)
	}
	return nil
}

func (obj *DummyIx) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DummyIx: %w", err)
	}
	return nil
}

func UnmarshalDummyIx(buf []byte) (*DummyIx, error) {
	obj := new(DummyIx)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DummyZcAccount struct {
	PositionBinData PositionBinData `json:"positionBinData"`
}

func (obj DummyZcAccount) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionBinData`:
	err = encoder.Encode(obj.PositionBinData)
	if err != nil {
		return errors.NewField("PositionBinData", err)
	}
	return nil
}

func (obj DummyZcAccount) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DummyZcAccount: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DummyZcAccount) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionBinData`:
	err = decoder.Decode(&obj.PositionBinData)
	if err != nil {
		return errors.NewField("PositionBinData", err)
	}
	return nil
}

func (obj *DummyZcAccount) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DummyZcAccount: %w", err)
	}
	return nil
}

func UnmarshalDummyZcAccount(buf []byte) (*DummyZcAccount, error) {
	obj := new(DummyZcAccount)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeParameter struct {
	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`
}

func (obj DynamicFeeParameter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	return nil
}

func (obj DynamicFeeParameter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeParameter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeParameter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	return nil
}

func (obj *DynamicFeeParameter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeParameter: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeParameter(buf []byte) (*DynamicFeeParameter, error) {
	obj := new(DynamicFeeParameter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DynamicFeeParameterUpdate struct {
	LbPair solanago.PublicKey `json:"lbPair"`

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`
}

func (obj DynamicFeeParameterUpdate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	return nil
}

func (obj DynamicFeeParameterUpdate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DynamicFeeParameterUpdate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DynamicFeeParameterUpdate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	return nil
}

func (obj *DynamicFeeParameterUpdate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DynamicFeeParameterUpdate: %w", err)
	}
	return nil
}

func UnmarshalDynamicFeeParameterUpdate(buf []byte) (*DynamicFeeParameterUpdate, error) {
	obj := new(DynamicFeeParameterUpdate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FeeInfo struct {
	FeeXPerTokenComplete binary.Uint128 `json:"feeXPerTokenComplete"`
	FeeYPerTokenComplete binary.Uint128 `json:"feeYPerTokenComplete"`
	FeeXPending          uint64         `json:"feeXPending"`
	FeeYPending          uint64         `json:"feeYPending"`
}

func (obj FeeInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeeXPerTokenComplete`:
	err = encoder.Encode(obj.FeeXPerTokenComplete)
	if err != nil {
		return errors.NewField("FeeXPerTokenComplete", err)
	}
	// Serialize `FeeYPerTokenComplete`:
	err = encoder.Encode(obj.FeeYPerTokenComplete)
	if err != nil {
		return errors.NewField("FeeYPerTokenComplete", err)
	}
	// Serialize `FeeXPending`:
	err = encoder.Encode(obj.FeeXPending)
	if err != nil {
		return errors.NewField("FeeXPending", err)
	}
	// Serialize `FeeYPending`:
	err = encoder.Encode(obj.FeeYPending)
	if err != nil {
		return errors.NewField("FeeYPending", err)
	}
	return nil
}

func (obj FeeInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FeeInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FeeInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeXPerTokenComplete`:
	err = decoder.Decode(&obj.FeeXPerTokenComplete)
	if err != nil {
		return errors.NewField("FeeXPerTokenComplete", err)
	}
	// Deserialize `FeeYPerTokenComplete`:
	err = decoder.Decode(&obj.FeeYPerTokenComplete)
	if err != nil {
		return errors.NewField("FeeYPerTokenComplete", err)
	}
	// Deserialize `FeeXPending`:
	err = decoder.Decode(&obj.FeeXPending)
	if err != nil {
		return errors.NewField("FeeXPending", err)
	}
	// Deserialize `FeeYPending`:
	err = decoder.Decode(&obj.FeeYPending)
	if err != nil {
		return errors.NewField("FeeYPending", err)
	}
	return nil
}

func (obj *FeeInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FeeInfo: %w", err)
	}
	return nil
}

func UnmarshalFeeInfo(buf []byte) (*FeeInfo, error) {
	obj := new(FeeInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FeeParameterUpdate struct {
	LbPair        solanago.PublicKey `json:"lbPair"`
	ProtocolShare uint16             `json:"protocolShare"`
	BaseFactor    uint16             `json:"baseFactor"`
}

func (obj FeeParameterUpdate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	return nil
}

func (obj FeeParameterUpdate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FeeParameterUpdate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FeeParameterUpdate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	return nil
}

func (obj *FeeParameterUpdate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FeeParameterUpdate: %w", err)
	}
	return nil
}

func UnmarshalFeeParameterUpdate(buf []byte) (*FeeParameterUpdate, error) {
	obj := new(FeeParameterUpdate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FundReward struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	Funder      solanago.PublicKey `json:"funder"`
	RewardIndex uint64             `json:"rewardIndex"`
	Amount      uint64             `json:"amount"`
}

func (obj FundReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Funder`:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj FundReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FundReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FundReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *FundReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FundReward: %w", err)
	}
	return nil
}

func UnmarshalFundReward(buf []byte) (*FundReward, error) {
	obj := new(FundReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type GoToABin struct {
	LbPair    solanago.PublicKey `json:"lbPair"`
	FromBinId int32              `json:"fromBinId"`
	ToBinId   int32              `json:"toBinId"`
}

func (obj GoToABin) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `FromBinId`:
	err = encoder.Encode(obj.FromBinId)
	if err != nil {
		return errors.NewField("FromBinId", err)
	}
	// Serialize `ToBinId`:
	err = encoder.Encode(obj.ToBinId)
	if err != nil {
		return errors.NewField("ToBinId", err)
	}
	return nil
}

func (obj GoToABin) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GoToABin: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GoToABin) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `FromBinId`:
	err = decoder.Decode(&obj.FromBinId)
	if err != nil {
		return errors.NewField("FromBinId", err)
	}
	// Deserialize `ToBinId`:
	err = decoder.Decode(&obj.ToBinId)
	if err != nil {
		return errors.NewField("ToBinId", err)
	}
	return nil
}

func (obj *GoToABin) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GoToABin: %w", err)
	}
	return nil
}

func UnmarshalGoToABin(buf []byte) (*GoToABin, error) {
	obj := new(GoToABin)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreaseObservation struct {
	Oracle               solanago.PublicKey `json:"oracle"`
	NewObservationLength uint64             `json:"newObservationLength"`
}

func (obj IncreaseObservation) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `NewObservationLength`:
	err = encoder.Encode(obj.NewObservationLength)
	if err != nil {
		return errors.NewField("NewObservationLength", err)
	}
	return nil
}

func (obj IncreaseObservation) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreaseObservation: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreaseObservation) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `NewObservationLength`:
	err = decoder.Decode(&obj.NewObservationLength)
	if err != nil {
		return errors.NewField("NewObservationLength", err)
	}
	return nil
}

func (obj *IncreaseObservation) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreaseObservation: %w", err)
	}
	return nil
}

func UnmarshalIncreaseObservation(buf []byte) (*IncreaseObservation, error) {
	obj := new(IncreaseObservation)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreasePositionLength struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	Position    solanago.PublicKey `json:"position"`
	Owner       solanago.PublicKey `json:"owner"`
	LengthToAdd uint16             `json:"lengthToAdd"`
	Side        uint8              `json:"side"`
}

func (obj IncreasePositionLength) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `LengthToAdd`:
	err = encoder.Encode(obj.LengthToAdd)
	if err != nil {
		return errors.NewField("LengthToAdd", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	return nil
}

func (obj IncreasePositionLength) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreasePositionLength: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreasePositionLength) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `LengthToAdd`:
	err = decoder.Decode(&obj.LengthToAdd)
	if err != nil {
		return errors.NewField("LengthToAdd", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	return nil
}

func (obj *IncreasePositionLength) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreasePositionLength: %w", err)
	}
	return nil
}

func UnmarshalIncreasePositionLength(buf []byte) (*IncreasePositionLength, error) {
	obj := new(IncreasePositionLength)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitPermissionPairIx struct {
	ActiveId           int32  `json:"activeId"`
	BinStep            uint16 `json:"binStep"`
	BaseFactor         uint16 `json:"baseFactor"`
	BaseFeePowerFactor uint8  `json:"baseFeePowerFactor"`
	ActivationType     uint8  `json:"activationType"`
	ProtocolShare      uint16 `json:"protocolShare"`
}

func (obj InitPermissionPairIx) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `BaseFeePowerFactor`:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	return nil
}

func (obj InitPermissionPairIx) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitPermissionPairIx: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitPermissionPairIx) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	return nil
}

func (obj *InitPermissionPairIx) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitPermissionPairIx: %w", err)
	}
	return nil
}

func UnmarshalInitPermissionPairIx(buf []byte) (*InitPermissionPairIx, error) {
	obj := new(InitPermissionPairIx)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitPresetParameters2Ix struct {
	Index uint16 `json:"index"`

	// Bin step. Represent the price increment / decrement.
	BinStep uint16 `json:"binStep"`

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16 `json:"baseFactor"`

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16 `json:"protocolShare"`

	// Base fee power factor
	BaseFeePowerFactor uint8 `json:"baseFeePowerFactor"`
}

func (obj InitPresetParameters2Ix) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Serialize `BaseFeePowerFactor`:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	return nil
}

func (obj InitPresetParameters2Ix) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitPresetParameters2Ix: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitPresetParameters2Ix) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	return nil
}

func (obj *InitPresetParameters2Ix) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitPresetParameters2Ix: %w", err)
	}
	return nil
}

func UnmarshalInitPresetParameters2Ix(buf []byte) (*InitPresetParameters2Ix, error) {
	obj := new(InitPresetParameters2Ix)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitPresetParametersIx struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16 `json:"binStep"`

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16 `json:"baseFactor"`

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16 `json:"protocolShare"`
}

func (obj InitPresetParametersIx) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	return nil
}

func (obj InitPresetParametersIx) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitPresetParametersIx: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitPresetParametersIx) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	return nil
}

func (obj *InitPresetParametersIx) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitPresetParametersIx: %w", err)
	}
	return nil
}

func UnmarshalInitPresetParametersIx(buf []byte) (*InitPresetParametersIx, error) {
	obj := new(InitPresetParametersIx)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializeLbPair2Params struct {
	// Pool price
	ActiveId int32 `json:"activeId"`

	// Padding, for future use
	Padding [96]uint8 `json:"padding"`
}

func (obj InitializeLbPair2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj InitializeLbPair2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializeLbPair2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializeLbPair2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *InitializeLbPair2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializeLbPair2Params: %w", err)
	}
	return nil
}

func UnmarshalInitializeLbPair2Params(buf []byte) (*InitializeLbPair2Params, error) {
	obj := new(InitializeLbPair2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitializeReward struct {
	LbPair         solanago.PublicKey `json:"lbPair"`
	RewardMint     solanago.PublicKey `json:"rewardMint"`
	Funder         solanago.PublicKey `json:"funder"`
	RewardIndex    uint64             `json:"rewardIndex"`
	RewardDuration uint64             `json:"rewardDuration"`
}

func (obj InitializeReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `RewardMint`:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Serialize `Funder`:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `RewardDuration`:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	return nil
}

func (obj InitializeReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitializeReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitializeReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	return nil
}

func (obj *InitializeReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitializeReward: %w", err)
	}
	return nil
}

func UnmarshalInitializeReward(buf []byte) (*InitializeReward, error) {
	obj := new(InitializeReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LbPair struct {
	Parameters  StaticParameters   `json:"parameters"`
	VParameters VariableParameters `json:"vParameters"`
	BumpSeed    [1]uint8           `json:"bumpSeed"`

	// Bin step signer seed
	BinStepSeed [2]uint8 `json:"binStepSeed"`

	// Type of the pair
	PairType uint8 `json:"pairType"`

	// Active bin id
	ActiveId int32 `json:"activeId"`

	// Bin step. Represent the price increment / decrement.
	BinStep uint16 `json:"binStep"`

	// Status of the pair. Check PairStatus enum.
	Status uint8 `json:"status"`

	// Require base factor seed
	RequireBaseFactorSeed uint8 `json:"requireBaseFactorSeed"`

	// Base factor seed
	BaseFactorSeed [2]uint8 `json:"baseFactorSeed"`

	// Activation type
	ActivationType uint8 `json:"activationType"`

	// Allow pool creator to enable/disable pool with restricted validation. Only applicable for customizable permissionless pair type.
	CreatorPoolOnOffControl uint8 `json:"creatorPoolOnOffControl"`

	// Token X mint
	TokenXMint solanago.PublicKey `json:"tokenXMint"`

	// Token Y mint
	TokenYMint solanago.PublicKey `json:"tokenYMint"`

	// LB token X vault
	ReserveX solanago.PublicKey `json:"reserveX"`

	// LB token Y vault
	ReserveY solanago.PublicKey `json:"reserveY"`

	// Uncollected protocol fee
	ProtocolFee ProtocolFee `json:"protocolFee"`

	// _padding_1, previous Fee owner, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding1 [32]uint8 `json:"padding1"`

	// Farming reward information
	RewardInfos [2]RewardInfo `json:"rewardInfos"`

	// Oracle pubkey
	Oracle solanago.PublicKey `json:"oracle"`

	// Packed initialized bin array state
	BinArrayBitmap [16]uint64 `json:"binArrayBitmap"`

	// Last time the pool fee parameter was updated
	LastUpdatedAt int64 `json:"lastUpdatedAt"`

	// _padding_2, previous whitelisted_wallet, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding2 [32]uint8 `json:"padding2"`

	// Address allowed to swap when the current point is greater than or equal to the pre-activation point. The pre-activation point is calculated as `activation_point - pre_activation_duration`.
	PreActivationSwapAddress solanago.PublicKey `json:"preActivationSwapAddress"`

	// Base keypair. Only required for permission pair
	BaseKey solanago.PublicKey `json:"baseKey"`

	// Time point to enable the pair. Only applicable for permission pair.
	ActivationPoint uint64 `json:"activationPoint"`

	// Duration before activation activation_point. Used to calculate pre-activation time point for pre_activation_swap_address
	PreActivationDuration uint64 `json:"preActivationDuration"`

	// _padding 3 is reclaimed free space from swap_cap_deactivate_point and swap_cap_amount before, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding3 [8]uint8 `json:"padding3"`

	// _padding_4, previous lock_duration, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding4 uint64 `json:"padding4"`

	// Pool creator
	Creator solanago.PublicKey `json:"creator"`

	// token_mint_x_program_flag
	TokenMintXProgramFlag uint8 `json:"tokenMintXProgramFlag"`

	// token_mint_y_program_flag
	TokenMintYProgramFlag uint8 `json:"tokenMintYProgramFlag"`

	// Reserved space for future use
	Reserved [22]uint8 `json:"reserved"`
}

func (obj LbPair) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Parameters`:
	err = encoder.Encode(obj.Parameters)
	if err != nil {
		return errors.NewField("Parameters", err)
	}
	// Serialize `VParameters`:
	err = encoder.Encode(obj.VParameters)
	if err != nil {
		return errors.NewField("VParameters", err)
	}
	// Serialize `BumpSeed`:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return errors.NewField("BumpSeed", err)
	}
	// Serialize `BinStepSeed`:
	err = encoder.Encode(obj.BinStepSeed)
	if err != nil {
		return errors.NewField("BinStepSeed", err)
	}
	// Serialize `PairType`:
	err = encoder.Encode(obj.PairType)
	if err != nil {
		return errors.NewField("PairType", err)
	}
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `RequireBaseFactorSeed`:
	err = encoder.Encode(obj.RequireBaseFactorSeed)
	if err != nil {
		return errors.NewField("RequireBaseFactorSeed", err)
	}
	// Serialize `BaseFactorSeed`:
	err = encoder.Encode(obj.BaseFactorSeed)
	if err != nil {
		return errors.NewField("BaseFactorSeed", err)
	}
	// Serialize `ActivationType`:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Serialize `CreatorPoolOnOffControl`:
	err = encoder.Encode(obj.CreatorPoolOnOffControl)
	if err != nil {
		return errors.NewField("CreatorPoolOnOffControl", err)
	}
	// Serialize `TokenXMint`:
	err = encoder.Encode(obj.TokenXMint)
	if err != nil {
		return errors.NewField("TokenXMint", err)
	}
	// Serialize `TokenYMint`:
	err = encoder.Encode(obj.TokenYMint)
	if err != nil {
		return errors.NewField("TokenYMint", err)
	}
	// Serialize `ReserveX`:
	err = encoder.Encode(obj.ReserveX)
	if err != nil {
		return errors.NewField("ReserveX", err)
	}
	// Serialize `ReserveY`:
	err = encoder.Encode(obj.ReserveY)
	if err != nil {
		return errors.NewField("ReserveY", err)
	}
	// Serialize `ProtocolFee`:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `RewardInfos`:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `BinArrayBitmap`:
	err = encoder.Encode(obj.BinArrayBitmap)
	if err != nil {
		return errors.NewField("BinArrayBitmap", err)
	}
	// Serialize `LastUpdatedAt`:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return errors.NewField("LastUpdatedAt", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Serialize `PreActivationSwapAddress`:
	err = encoder.Encode(obj.PreActivationSwapAddress)
	if err != nil {
		return errors.NewField("PreActivationSwapAddress", err)
	}
	// Serialize `BaseKey`:
	err = encoder.Encode(obj.BaseKey)
	if err != nil {
		return errors.NewField("BaseKey", err)
	}
	// Serialize `ActivationPoint`:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Serialize `PreActivationDuration`:
	err = encoder.Encode(obj.PreActivationDuration)
	if err != nil {
		return errors.NewField("PreActivationDuration", err)
	}
	// Serialize `Padding3`:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return errors.NewField("Padding3", err)
	}
	// Serialize `Padding4`:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return errors.NewField("Padding4", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `TokenMintXProgramFlag`:
	err = encoder.Encode(obj.TokenMintXProgramFlag)
	if err != nil {
		return errors.NewField("TokenMintXProgramFlag", err)
	}
	// Serialize `TokenMintYProgramFlag`:
	err = encoder.Encode(obj.TokenMintYProgramFlag)
	if err != nil {
		return errors.NewField("TokenMintYProgramFlag", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj LbPair) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LbPair: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LbPair) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Parameters`:
	err = decoder.Decode(&obj.Parameters)
	if err != nil {
		return errors.NewField("Parameters", err)
	}
	// Deserialize `VParameters`:
	err = decoder.Decode(&obj.VParameters)
	if err != nil {
		return errors.NewField("VParameters", err)
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return errors.NewField("BumpSeed", err)
	}
	// Deserialize `BinStepSeed`:
	err = decoder.Decode(&obj.BinStepSeed)
	if err != nil {
		return errors.NewField("BinStepSeed", err)
	}
	// Deserialize `PairType`:
	err = decoder.Decode(&obj.PairType)
	if err != nil {
		return errors.NewField("PairType", err)
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `RequireBaseFactorSeed`:
	err = decoder.Decode(&obj.RequireBaseFactorSeed)
	if err != nil {
		return errors.NewField("RequireBaseFactorSeed", err)
	}
	// Deserialize `BaseFactorSeed`:
	err = decoder.Decode(&obj.BaseFactorSeed)
	if err != nil {
		return errors.NewField("BaseFactorSeed", err)
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return errors.NewField("ActivationType", err)
	}
	// Deserialize `CreatorPoolOnOffControl`:
	err = decoder.Decode(&obj.CreatorPoolOnOffControl)
	if err != nil {
		return errors.NewField("CreatorPoolOnOffControl", err)
	}
	// Deserialize `TokenXMint`:
	err = decoder.Decode(&obj.TokenXMint)
	if err != nil {
		return errors.NewField("TokenXMint", err)
	}
	// Deserialize `TokenYMint`:
	err = decoder.Decode(&obj.TokenYMint)
	if err != nil {
		return errors.NewField("TokenYMint", err)
	}
	// Deserialize `ReserveX`:
	err = decoder.Decode(&obj.ReserveX)
	if err != nil {
		return errors.NewField("ReserveX", err)
	}
	// Deserialize `ReserveY`:
	err = decoder.Decode(&obj.ReserveY)
	if err != nil {
		return errors.NewField("ReserveY", err)
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `BinArrayBitmap`:
	err = decoder.Decode(&obj.BinArrayBitmap)
	if err != nil {
		return errors.NewField("BinArrayBitmap", err)
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return errors.NewField("LastUpdatedAt", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	// Deserialize `PreActivationSwapAddress`:
	err = decoder.Decode(&obj.PreActivationSwapAddress)
	if err != nil {
		return errors.NewField("PreActivationSwapAddress", err)
	}
	// Deserialize `BaseKey`:
	err = decoder.Decode(&obj.BaseKey)
	if err != nil {
		return errors.NewField("BaseKey", err)
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return errors.NewField("ActivationPoint", err)
	}
	// Deserialize `PreActivationDuration`:
	err = decoder.Decode(&obj.PreActivationDuration)
	if err != nil {
		return errors.NewField("PreActivationDuration", err)
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return errors.NewField("Padding3", err)
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return errors.NewField("Padding4", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `TokenMintXProgramFlag`:
	err = decoder.Decode(&obj.TokenMintXProgramFlag)
	if err != nil {
		return errors.NewField("TokenMintXProgramFlag", err)
	}
	// Deserialize `TokenMintYProgramFlag`:
	err = decoder.Decode(&obj.TokenMintYProgramFlag)
	if err != nil {
		return errors.NewField("TokenMintYProgramFlag", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *LbPair) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LbPair: %w", err)
	}
	return nil
}

func UnmarshalLbPair(buf []byte) (*LbPair, error) {
	obj := new(LbPair)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LbPairCreate struct {
	LbPair  solanago.PublicKey `json:"lbPair"`
	BinStep uint16             `json:"binStep"`
	TokenX  solanago.PublicKey `json:"tokenX"`
	TokenY  solanago.PublicKey `json:"tokenY"`
}

func (obj LbPairCreate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `TokenX`:
	err = encoder.Encode(obj.TokenX)
	if err != nil {
		return errors.NewField("TokenX", err)
	}
	// Serialize `TokenY`:
	err = encoder.Encode(obj.TokenY)
	if err != nil {
		return errors.NewField("TokenY", err)
	}
	return nil
}

func (obj LbPairCreate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LbPairCreate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LbPairCreate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `TokenX`:
	err = decoder.Decode(&obj.TokenX)
	if err != nil {
		return errors.NewField("TokenX", err)
	}
	// Deserialize `TokenY`:
	err = decoder.Decode(&obj.TokenY)
	if err != nil {
		return errors.NewField("TokenY", err)
	}
	return nil
}

func (obj *LbPairCreate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LbPairCreate: %w", err)
	}
	return nil
}

func UnmarshalLbPairCreate(buf []byte) (*LbPairCreate, error) {
	obj := new(LbPairCreate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityOneSideParameter struct {
	// Amount of X token or Y token to deposit
	Amount uint64 `json:"amount"`

	// Active bin that integrator observe off-chain
	ActiveId int32 `json:"activeId"`

	// max active bin slippage allowed
	MaxActiveBinSlippage int32 `json:"maxActiveBinSlippage"`

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistributionByWeight `json:"binLiquidityDist"`
}

func (obj LiquidityOneSideParameter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `MaxActiveBinSlippage`:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Serialize `BinLiquidityDist`:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return errors.NewField("BinLiquidityDist", err)
	}
	return nil
}

func (obj LiquidityOneSideParameter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityOneSideParameter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityOneSideParameter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return errors.NewField("BinLiquidityDist", err)
	}
	return nil
}

func (obj *LiquidityOneSideParameter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityOneSideParameter: %w", err)
	}
	return nil
}

func UnmarshalLiquidityOneSideParameter(buf []byte) (*LiquidityOneSideParameter, error) {
	obj := new(LiquidityOneSideParameter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityParameter struct {
	// Amount of X token to deposit
	AmountX uint64 `json:"amountX"`

	// Amount of Y token to deposit
	AmountY uint64 `json:"amountY"`

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistribution `json:"binLiquidityDist"`
}

func (obj LiquidityParameter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountX`:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Serialize `AmountY`:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Serialize `BinLiquidityDist`:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return errors.NewField("BinLiquidityDist", err)
	}
	return nil
}

func (obj LiquidityParameter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityParameter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityParameter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return errors.NewField("BinLiquidityDist", err)
	}
	return nil
}

func (obj *LiquidityParameter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityParameter: %w", err)
	}
	return nil
}

func UnmarshalLiquidityParameter(buf []byte) (*LiquidityParameter, error) {
	obj := new(LiquidityParameter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityParameterByStrategy struct {
	// Amount of X token to deposit
	AmountX uint64 `json:"amountX"`

	// Amount of Y token to deposit
	AmountY uint64 `json:"amountY"`

	// Active bin that integrator observe off-chain
	ActiveId int32 `json:"activeId"`

	// max active bin slippage allowed
	MaxActiveBinSlippage int32 `json:"maxActiveBinSlippage"`

	// strategy parameters
	StrategyParameters StrategyParameters `json:"strategyParameters"`
}

func (obj LiquidityParameterByStrategy) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountX`:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Serialize `AmountY`:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `MaxActiveBinSlippage`:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Serialize `StrategyParameters`:
	err = encoder.Encode(obj.StrategyParameters)
	if err != nil {
		return errors.NewField("StrategyParameters", err)
	}
	return nil
}

func (obj LiquidityParameterByStrategy) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityParameterByStrategy: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityParameterByStrategy) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Deserialize `StrategyParameters`:
	err = decoder.Decode(&obj.StrategyParameters)
	if err != nil {
		return errors.NewField("StrategyParameters", err)
	}
	return nil
}

func (obj *LiquidityParameterByStrategy) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityParameterByStrategy: %w", err)
	}
	return nil
}

func UnmarshalLiquidityParameterByStrategy(buf []byte) (*LiquidityParameterByStrategy, error) {
	obj := new(LiquidityParameterByStrategy)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityParameterByStrategyOneSide struct {
	// Amount of X token or Y token to deposit
	Amount uint64 `json:"amount"`

	// Active bin that integrator observe off-chain
	ActiveId int32 `json:"activeId"`

	// max active bin slippage allowed
	MaxActiveBinSlippage int32 `json:"maxActiveBinSlippage"`

	// strategy parameters
	StrategyParameters StrategyParameters `json:"strategyParameters"`
}

func (obj LiquidityParameterByStrategyOneSide) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `MaxActiveBinSlippage`:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Serialize `StrategyParameters`:
	err = encoder.Encode(obj.StrategyParameters)
	if err != nil {
		return errors.NewField("StrategyParameters", err)
	}
	return nil
}

func (obj LiquidityParameterByStrategyOneSide) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityParameterByStrategyOneSide: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityParameterByStrategyOneSide) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Deserialize `StrategyParameters`:
	err = decoder.Decode(&obj.StrategyParameters)
	if err != nil {
		return errors.NewField("StrategyParameters", err)
	}
	return nil
}

func (obj *LiquidityParameterByStrategyOneSide) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityParameterByStrategyOneSide: %w", err)
	}
	return nil
}

func UnmarshalLiquidityParameterByStrategyOneSide(buf []byte) (*LiquidityParameterByStrategyOneSide, error) {
	obj := new(LiquidityParameterByStrategyOneSide)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidityParameterByWeight struct {
	// Amount of X token to deposit
	AmountX uint64 `json:"amountX"`

	// Amount of Y token to deposit
	AmountY uint64 `json:"amountY"`

	// Active bin that integrator observe off-chain
	ActiveId int32 `json:"activeId"`

	// max active bin slippage allowed
	MaxActiveBinSlippage int32 `json:"maxActiveBinSlippage"`

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistributionByWeight `json:"binLiquidityDist"`
}

func (obj LiquidityParameterByWeight) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountX`:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Serialize `AmountY`:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `MaxActiveBinSlippage`:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Serialize `BinLiquidityDist`:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return errors.NewField("BinLiquidityDist", err)
	}
	return nil
}

func (obj LiquidityParameterByWeight) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidityParameterByWeight: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidityParameterByWeight) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return errors.NewField("BinLiquidityDist", err)
	}
	return nil
}

func (obj *LiquidityParameterByWeight) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidityParameterByWeight: %w", err)
	}
	return nil
}

func UnmarshalLiquidityParameterByWeight(buf []byte) (*LiquidityParameterByWeight, error) {
	obj := new(LiquidityParameterByWeight)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Oracle struct {
	// Index of latest observation
	Idx uint64 `json:"idx"`

	// Size of active sample. Active sample is initialized observation.
	ActiveSize uint64 `json:"activeSize"`

	// Number of observations
	Length uint64 `json:"length"`
}

func (obj Oracle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Idx`:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return errors.NewField("Idx", err)
	}
	// Serialize `ActiveSize`:
	err = encoder.Encode(obj.ActiveSize)
	if err != nil {
		return errors.NewField("ActiveSize", err)
	}
	// Serialize `Length`:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return errors.NewField("Length", err)
	}
	return nil
}

func (obj Oracle) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Oracle: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Oracle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return errors.NewField("Idx", err)
	}
	// Deserialize `ActiveSize`:
	err = decoder.Decode(&obj.ActiveSize)
	if err != nil {
		return errors.NewField("ActiveSize", err)
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return errors.NewField("Length", err)
	}
	return nil
}

func (obj *Oracle) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Oracle: %w", err)
	}
	return nil
}

func UnmarshalOracle(buf []byte) (*Oracle, error) {
	obj := new(Oracle)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Pair status. 0 = Enabled, 1 = Disabled. Putting 0 as enabled for backward compatibility.
type PairStatus binary.BorshEnum

const (
	PairStatus_Enabled PairStatus = iota
	PairStatus_Disabled
)

func (value PairStatus) String() string {
	switch value {
	case PairStatus_Enabled:
		return "Enabled"
	case PairStatus_Disabled:
		return "Disabled"
	default:
		return ""
	}
}

// Type of the Pair. 0 = Permissionless, 1 = Permission, 2 = CustomizablePermissionless. Putting 0 as permissionless for backward compatibility.
type PairType binary.BorshEnum

const (
	PairType_Permissionless PairType = iota
	PairType_Permission
	PairType_CustomizablePermissionless
	PairType_PermissionlessV2
)

func (value PairType) String() string {
	switch value {
	case PairType_Permissionless:
		return "Permissionless"
	case PairType_Permission:
		return "Permission"
	case PairType_CustomizablePermissionless:
		return "CustomizablePermissionless"
	case PairType_PermissionlessV2:
		return "PermissionlessV2"
	default:
		return ""
	}
}

type Position struct {
	// The LB pair of this position
	LbPair solanago.PublicKey `json:"lbPair"`

	// Owner of the position. Client rely on this to to fetch their positions.
	Owner solanago.PublicKey `json:"owner"`

	// Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
	LiquidityShares [70]uint64 `json:"liquidityShares"`

	// Farming reward information
	RewardInfos [70]UserRewardInfo `json:"rewardInfos"`

	// Swap fee to claim information
	FeeInfos [70]FeeInfo `json:"feeInfos"`

	// Lower bin ID
	LowerBinId int32 `json:"lowerBinId"`

	// Upper bin ID
	UpperBinId int32 `json:"upperBinId"`

	// Last updated timestamp
	LastUpdatedAt int64 `json:"lastUpdatedAt"`

	// Total claimed token fee X
	TotalClaimedFeeXAmount uint64 `json:"totalClaimedFeeXAmount"`

	// Total claimed token fee Y
	TotalClaimedFeeYAmount uint64 `json:"totalClaimedFeeYAmount"`

	// Total claimed rewards
	TotalClaimedRewards [2]uint64 `json:"totalClaimedRewards"`

	// Reserved space for future use
	Reserved [160]uint8 `json:"reserved"`
}

func (obj Position) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `LiquidityShares`:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return errors.NewField("LiquidityShares", err)
	}
	// Serialize `RewardInfos`:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Serialize `FeeInfos`:
	err = encoder.Encode(obj.FeeInfos)
	if err != nil {
		return errors.NewField("FeeInfos", err)
	}
	// Serialize `LowerBinId`:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return errors.NewField("LowerBinId", err)
	}
	// Serialize `UpperBinId`:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return errors.NewField("UpperBinId", err)
	}
	// Serialize `LastUpdatedAt`:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return errors.NewField("LastUpdatedAt", err)
	}
	// Serialize `TotalClaimedFeeXAmount`:
	err = encoder.Encode(obj.TotalClaimedFeeXAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeXAmount", err)
	}
	// Serialize `TotalClaimedFeeYAmount`:
	err = encoder.Encode(obj.TotalClaimedFeeYAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeYAmount", err)
	}
	// Serialize `TotalClaimedRewards`:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return errors.NewField("TotalClaimedRewards", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Position) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Position: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return errors.NewField("LiquidityShares", err)
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Deserialize `FeeInfos`:
	err = decoder.Decode(&obj.FeeInfos)
	if err != nil {
		return errors.NewField("FeeInfos", err)
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return errors.NewField("LowerBinId", err)
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return errors.NewField("UpperBinId", err)
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return errors.NewField("LastUpdatedAt", err)
	}
	// Deserialize `TotalClaimedFeeXAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeXAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeXAmount", err)
	}
	// Deserialize `TotalClaimedFeeYAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeYAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeYAmount", err)
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return errors.NewField("TotalClaimedRewards", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Position) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Position: %w", err)
	}
	return nil
}

func UnmarshalPosition(buf []byte) (*Position, error) {
	obj := new(Position)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionBinData struct {
	LiquidityShare binary.Uint128 `json:"liquidityShare"`
	RewardInfo     UserRewardInfo `json:"rewardInfo"`
	FeeInfo        FeeInfo        `json:"feeInfo"`
}

func (obj PositionBinData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LiquidityShare`:
	err = encoder.Encode(obj.LiquidityShare)
	if err != nil {
		return errors.NewField("LiquidityShare", err)
	}
	// Serialize `RewardInfo`:
	err = encoder.Encode(obj.RewardInfo)
	if err != nil {
		return errors.NewField("RewardInfo", err)
	}
	// Serialize `FeeInfo`:
	err = encoder.Encode(obj.FeeInfo)
	if err != nil {
		return errors.NewField("FeeInfo", err)
	}
	return nil
}

func (obj PositionBinData) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionBinData: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionBinData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LiquidityShare`:
	err = decoder.Decode(&obj.LiquidityShare)
	if err != nil {
		return errors.NewField("LiquidityShare", err)
	}
	// Deserialize `RewardInfo`:
	err = decoder.Decode(&obj.RewardInfo)
	if err != nil {
		return errors.NewField("RewardInfo", err)
	}
	// Deserialize `FeeInfo`:
	err = decoder.Decode(&obj.FeeInfo)
	if err != nil {
		return errors.NewField("FeeInfo", err)
	}
	return nil
}

func (obj *PositionBinData) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionBinData: %w", err)
	}
	return nil
}

func UnmarshalPositionBinData(buf []byte) (*PositionBinData, error) {
	obj := new(PositionBinData)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionClose struct {
	Position solanago.PublicKey `json:"position"`
	Owner    solanago.PublicKey `json:"owner"`
}

func (obj PositionClose) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj PositionClose) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionClose: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionClose) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj *PositionClose) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionClose: %w", err)
	}
	return nil
}

func UnmarshalPositionClose(buf []byte) (*PositionClose, error) {
	obj := new(PositionClose)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionCreate struct {
	LbPair   solanago.PublicKey `json:"lbPair"`
	Position solanago.PublicKey `json:"position"`
	Owner    solanago.PublicKey `json:"owner"`
}

func (obj PositionCreate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj PositionCreate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionCreate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionCreate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	return nil
}

func (obj *PositionCreate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionCreate: %w", err)
	}
	return nil
}

func UnmarshalPositionCreate(buf []byte) (*PositionCreate, error) {
	obj := new(PositionCreate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionV2 struct {
	// The LB pair of this position
	LbPair solanago.PublicKey `json:"lbPair"`

	// Owner of the position. Client rely on this to to fetch their positions.
	Owner solanago.PublicKey `json:"owner"`

	// Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
	LiquidityShares [70]binary.Uint128 `json:"liquidityShares"`

	// Farming reward information
	RewardInfos [70]UserRewardInfo `json:"rewardInfos"`

	// Swap fee to claim information
	FeeInfos [70]FeeInfo `json:"feeInfos"`

	// Lower bin ID
	LowerBinId int32 `json:"lowerBinId"`

	// Upper bin ID
	UpperBinId int32 `json:"upperBinId"`

	// Last updated timestamp
	LastUpdatedAt int64 `json:"lastUpdatedAt"`

	// Total claimed token fee X
	TotalClaimedFeeXAmount uint64 `json:"totalClaimedFeeXAmount"`

	// Total claimed token fee Y
	TotalClaimedFeeYAmount uint64 `json:"totalClaimedFeeYAmount"`

	// Total claimed rewards
	TotalClaimedRewards [2]uint64 `json:"totalClaimedRewards"`

	// Operator of position
	Operator solanago.PublicKey `json:"operator"`

	// Time point which the locked liquidity can be withdraw
	LockReleasePoint uint64 `json:"lockReleasePoint"`

	// _padding_0, previous subjected_to_bootstrap_liquidity_locking, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding0 uint8 `json:"padding0"`

	// Address is able to claim fee in this position, only valid for bootstrap_liquidity_position
	FeeOwner solanago.PublicKey `json:"feeOwner"`

	// Reserved space for future use
	Reserved [87]uint8 `json:"reserved"`
}

func (obj PositionV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `LiquidityShares`:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return errors.NewField("LiquidityShares", err)
	}
	// Serialize `RewardInfos`:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Serialize `FeeInfos`:
	err = encoder.Encode(obj.FeeInfos)
	if err != nil {
		return errors.NewField("FeeInfos", err)
	}
	// Serialize `LowerBinId`:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return errors.NewField("LowerBinId", err)
	}
	// Serialize `UpperBinId`:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return errors.NewField("UpperBinId", err)
	}
	// Serialize `LastUpdatedAt`:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return errors.NewField("LastUpdatedAt", err)
	}
	// Serialize `TotalClaimedFeeXAmount`:
	err = encoder.Encode(obj.TotalClaimedFeeXAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeXAmount", err)
	}
	// Serialize `TotalClaimedFeeYAmount`:
	err = encoder.Encode(obj.TotalClaimedFeeYAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeYAmount", err)
	}
	// Serialize `TotalClaimedRewards`:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return errors.NewField("TotalClaimedRewards", err)
	}
	// Serialize `Operator`:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Serialize `LockReleasePoint`:
	err = encoder.Encode(obj.LockReleasePoint)
	if err != nil {
		return errors.NewField("LockReleasePoint", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `FeeOwner`:
	err = encoder.Encode(obj.FeeOwner)
	if err != nil {
		return errors.NewField("FeeOwner", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj PositionV2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionV2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return errors.NewField("LiquidityShares", err)
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return errors.NewField("RewardInfos", err)
	}
	// Deserialize `FeeInfos`:
	err = decoder.Decode(&obj.FeeInfos)
	if err != nil {
		return errors.NewField("FeeInfos", err)
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return errors.NewField("LowerBinId", err)
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return errors.NewField("UpperBinId", err)
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return errors.NewField("LastUpdatedAt", err)
	}
	// Deserialize `TotalClaimedFeeXAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeXAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeXAmount", err)
	}
	// Deserialize `TotalClaimedFeeYAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeYAmount)
	if err != nil {
		return errors.NewField("TotalClaimedFeeYAmount", err)
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return errors.NewField("TotalClaimedRewards", err)
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return errors.NewField("Operator", err)
	}
	// Deserialize `LockReleasePoint`:
	err = decoder.Decode(&obj.LockReleasePoint)
	if err != nil {
		return errors.NewField("LockReleasePoint", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `FeeOwner`:
	err = decoder.Decode(&obj.FeeOwner)
	if err != nil {
		return errors.NewField("FeeOwner", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *PositionV2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionV2: %w", err)
	}
	return nil
}

func UnmarshalPositionV2(buf []byte) (*PositionV2, error) {
	obj := new(PositionV2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PresetParameter struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16 `json:"binStep"`

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16 `json:"baseFactor"`

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32 `json:"minBinId"`

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32 `json:"maxBinId"`

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16 `json:"protocolShare"`
}

func (obj PresetParameter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `MinBinId`:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return errors.NewField("MinBinId", err)
	}
	// Serialize `MaxBinId`:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return errors.NewField("MaxBinId", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	return nil
}

func (obj PresetParameter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PresetParameter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PresetParameter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return errors.NewField("MinBinId", err)
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return errors.NewField("MaxBinId", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	return nil
}

func (obj *PresetParameter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PresetParameter: %w", err)
	}
	return nil
}

func UnmarshalPresetParameter(buf []byte) (*PresetParameter, error) {
	obj := new(PresetParameter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PresetParameter2 struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16 `json:"binStep"`

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16 `json:"baseFactor"`

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16 `json:"protocolShare"`

	// index
	Index uint16 `json:"index"`

	// Base fee power factor
	BaseFeePowerFactor uint8 `json:"baseFeePowerFactor"`

	// Padding 0 for future use
	Padding0 uint8 `json:"padding0"`

	// Padding 1 for future use
	Padding1 [20]uint64 `json:"padding1"`
}

func (obj PresetParameter2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BinStep`:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `BaseFeePowerFactor`:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Serialize `Padding0`:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj PresetParameter2) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PresetParameter2: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PresetParameter2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return errors.NewField("BinStep", err)
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return errors.NewField("Padding0", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *PresetParameter2) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PresetParameter2: %w", err)
	}
	return nil
}

func UnmarshalPresetParameter2(buf []byte) (*PresetParameter2, error) {
	obj := new(PresetParameter2)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ProtocolFee struct {
	AmountX uint64 `json:"amountX"`
	AmountY uint64 `json:"amountY"`
}

func (obj ProtocolFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountX`:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Serialize `AmountY`:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	return nil
}

func (obj ProtocolFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ProtocolFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ProtocolFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return errors.NewField("AmountX", err)
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return errors.NewField("AmountY", err)
	}
	return nil
}

func (obj *ProtocolFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolFee: %w", err)
	}
	return nil
}

func UnmarshalProtocolFee(buf []byte) (*ProtocolFee, error) {
	obj := new(ProtocolFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RebalanceLiquidityParams struct {
	// active id
	ActiveId int32 `json:"activeId"`

	// max active bin slippage allowed
	MaxActiveBinSlippage uint16 `json:"maxActiveBinSlippage"`

	// a flag to indicate that whether fee should be harvested
	ShouldClaimFee bool `json:"shouldClaimFee"`

	// a flag to indicate that whether rewards should be harvested
	ShouldClaimReward bool `json:"shouldClaimReward"`

	// threshold for withdraw token x
	MinWithdrawXAmount uint64 `json:"minWithdrawXAmount"`

	// threshold for deposit token x
	MaxDepositXAmount uint64 `json:"maxDepositXAmount"`

	// threshold for withdraw token y
	MinWithdrawYAmount uint64 `json:"minWithdrawYAmount"`

	// threshold for deposit token y
	MaxDepositYAmount uint64 `json:"maxDepositYAmount"`

	// padding 32 bytes for future usage
	Padding [32]uint8 `json:"padding"`

	// removes
	Removes []RemoveLiquidityParams `json:"removes"`

	// adds
	Adds []AddLiquidityParams `json:"adds"`
}

func (obj RebalanceLiquidityParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ActiveId`:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Serialize `MaxActiveBinSlippage`:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Serialize `ShouldClaimFee`:
	err = encoder.Encode(obj.ShouldClaimFee)
	if err != nil {
		return errors.NewField("ShouldClaimFee", err)
	}
	// Serialize `ShouldClaimReward`:
	err = encoder.Encode(obj.ShouldClaimReward)
	if err != nil {
		return errors.NewField("ShouldClaimReward", err)
	}
	// Serialize `MinWithdrawXAmount`:
	err = encoder.Encode(obj.MinWithdrawXAmount)
	if err != nil {
		return errors.NewField("MinWithdrawXAmount", err)
	}
	// Serialize `MaxDepositXAmount`:
	err = encoder.Encode(obj.MaxDepositXAmount)
	if err != nil {
		return errors.NewField("MaxDepositXAmount", err)
	}
	// Serialize `MinWithdrawYAmount`:
	err = encoder.Encode(obj.MinWithdrawYAmount)
	if err != nil {
		return errors.NewField("MinWithdrawYAmount", err)
	}
	// Serialize `MaxDepositYAmount`:
	err = encoder.Encode(obj.MaxDepositYAmount)
	if err != nil {
		return errors.NewField("MaxDepositYAmount", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Removes`:
	err = encoder.Encode(obj.Removes)
	if err != nil {
		return errors.NewField("Removes", err)
	}
	// Serialize `Adds`:
	err = encoder.Encode(obj.Adds)
	if err != nil {
		return errors.NewField("Adds", err)
	}
	return nil
}

func (obj RebalanceLiquidityParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RebalanceLiquidityParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RebalanceLiquidityParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return errors.NewField("ActiveId", err)
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return errors.NewField("MaxActiveBinSlippage", err)
	}
	// Deserialize `ShouldClaimFee`:
	err = decoder.Decode(&obj.ShouldClaimFee)
	if err != nil {
		return errors.NewField("ShouldClaimFee", err)
	}
	// Deserialize `ShouldClaimReward`:
	err = decoder.Decode(&obj.ShouldClaimReward)
	if err != nil {
		return errors.NewField("ShouldClaimReward", err)
	}
	// Deserialize `MinWithdrawXAmount`:
	err = decoder.Decode(&obj.MinWithdrawXAmount)
	if err != nil {
		return errors.NewField("MinWithdrawXAmount", err)
	}
	// Deserialize `MaxDepositXAmount`:
	err = decoder.Decode(&obj.MaxDepositXAmount)
	if err != nil {
		return errors.NewField("MaxDepositXAmount", err)
	}
	// Deserialize `MinWithdrawYAmount`:
	err = decoder.Decode(&obj.MinWithdrawYAmount)
	if err != nil {
		return errors.NewField("MinWithdrawYAmount", err)
	}
	// Deserialize `MaxDepositYAmount`:
	err = decoder.Decode(&obj.MaxDepositYAmount)
	if err != nil {
		return errors.NewField("MaxDepositYAmount", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Removes`:
	err = decoder.Decode(&obj.Removes)
	if err != nil {
		return errors.NewField("Removes", err)
	}
	// Deserialize `Adds`:
	err = decoder.Decode(&obj.Adds)
	if err != nil {
		return errors.NewField("Adds", err)
	}
	return nil
}

func (obj *RebalanceLiquidityParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RebalanceLiquidityParams: %w", err)
	}
	return nil
}

func UnmarshalRebalanceLiquidityParams(buf []byte) (*RebalanceLiquidityParams, error) {
	obj := new(RebalanceLiquidityParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Rebalancing struct {
	LbPair           solanago.PublicKey `json:"lbPair"`
	Position         solanago.PublicKey `json:"position"`
	XWithdrawnAmount uint64             `json:"xWithdrawnAmount"`
	XAddedAmount     uint64             `json:"xAddedAmount"`
	YWithdrawnAmount uint64             `json:"yWithdrawnAmount"`
	YAddedAmount     uint64             `json:"yAddedAmount"`
	XFeeAmount       uint64             `json:"xFeeAmount"`
	YFeeAmount       uint64             `json:"yFeeAmount"`
	OldMinId         int32              `json:"oldMinId"`
	OldMaxId         int32              `json:"oldMaxId"`
	NewMinId         int32              `json:"newMinId"`
	NewMaxId         int32              `json:"newMaxId"`
	Rewards          [2]uint64          `json:"rewards"`
}

func (obj Rebalancing) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `XWithdrawnAmount`:
	err = encoder.Encode(obj.XWithdrawnAmount)
	if err != nil {
		return errors.NewField("XWithdrawnAmount", err)
	}
	// Serialize `XAddedAmount`:
	err = encoder.Encode(obj.XAddedAmount)
	if err != nil {
		return errors.NewField("XAddedAmount", err)
	}
	// Serialize `YWithdrawnAmount`:
	err = encoder.Encode(obj.YWithdrawnAmount)
	if err != nil {
		return errors.NewField("YWithdrawnAmount", err)
	}
	// Serialize `YAddedAmount`:
	err = encoder.Encode(obj.YAddedAmount)
	if err != nil {
		return errors.NewField("YAddedAmount", err)
	}
	// Serialize `XFeeAmount`:
	err = encoder.Encode(obj.XFeeAmount)
	if err != nil {
		return errors.NewField("XFeeAmount", err)
	}
	// Serialize `YFeeAmount`:
	err = encoder.Encode(obj.YFeeAmount)
	if err != nil {
		return errors.NewField("YFeeAmount", err)
	}
	// Serialize `OldMinId`:
	err = encoder.Encode(obj.OldMinId)
	if err != nil {
		return errors.NewField("OldMinId", err)
	}
	// Serialize `OldMaxId`:
	err = encoder.Encode(obj.OldMaxId)
	if err != nil {
		return errors.NewField("OldMaxId", err)
	}
	// Serialize `NewMinId`:
	err = encoder.Encode(obj.NewMinId)
	if err != nil {
		return errors.NewField("NewMinId", err)
	}
	// Serialize `NewMaxId`:
	err = encoder.Encode(obj.NewMaxId)
	if err != nil {
		return errors.NewField("NewMaxId", err)
	}
	// Serialize `Rewards`:
	err = encoder.Encode(obj.Rewards)
	if err != nil {
		return errors.NewField("Rewards", err)
	}
	return nil
}

func (obj Rebalancing) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Rebalancing: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Rebalancing) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `XWithdrawnAmount`:
	err = decoder.Decode(&obj.XWithdrawnAmount)
	if err != nil {
		return errors.NewField("XWithdrawnAmount", err)
	}
	// Deserialize `XAddedAmount`:
	err = decoder.Decode(&obj.XAddedAmount)
	if err != nil {
		return errors.NewField("XAddedAmount", err)
	}
	// Deserialize `YWithdrawnAmount`:
	err = decoder.Decode(&obj.YWithdrawnAmount)
	if err != nil {
		return errors.NewField("YWithdrawnAmount", err)
	}
	// Deserialize `YAddedAmount`:
	err = decoder.Decode(&obj.YAddedAmount)
	if err != nil {
		return errors.NewField("YAddedAmount", err)
	}
	// Deserialize `XFeeAmount`:
	err = decoder.Decode(&obj.XFeeAmount)
	if err != nil {
		return errors.NewField("XFeeAmount", err)
	}
	// Deserialize `YFeeAmount`:
	err = decoder.Decode(&obj.YFeeAmount)
	if err != nil {
		return errors.NewField("YFeeAmount", err)
	}
	// Deserialize `OldMinId`:
	err = decoder.Decode(&obj.OldMinId)
	if err != nil {
		return errors.NewField("OldMinId", err)
	}
	// Deserialize `OldMaxId`:
	err = decoder.Decode(&obj.OldMaxId)
	if err != nil {
		return errors.NewField("OldMaxId", err)
	}
	// Deserialize `NewMinId`:
	err = decoder.Decode(&obj.NewMinId)
	if err != nil {
		return errors.NewField("NewMinId", err)
	}
	// Deserialize `NewMaxId`:
	err = decoder.Decode(&obj.NewMaxId)
	if err != nil {
		return errors.NewField("NewMaxId", err)
	}
	// Deserialize `Rewards`:
	err = decoder.Decode(&obj.Rewards)
	if err != nil {
		return errors.NewField("Rewards", err)
	}
	return nil
}

func (obj *Rebalancing) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Rebalancing: %w", err)
	}
	return nil
}

func UnmarshalRebalancing(buf []byte) (*Rebalancing, error) {
	obj := new(Rebalancing)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemainingAccountsInfo struct {
	Slices []RemainingAccountsSlice `json:"slices"`
}

func (obj RemainingAccountsInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Slices`:
	err = encoder.Encode(obj.Slices)
	if err != nil {
		return errors.NewField("Slices", err)
	}
	return nil
}

func (obj RemainingAccountsInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemainingAccountsInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemainingAccountsInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Slices`:
	err = decoder.Decode(&obj.Slices)
	if err != nil {
		return errors.NewField("Slices", err)
	}
	return nil
}

func (obj *RemainingAccountsInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsInfo: %w", err)
	}
	return nil
}

func UnmarshalRemainingAccountsInfo(buf []byte) (*RemainingAccountsInfo, error) {
	obj := new(RemainingAccountsInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemainingAccountsSlice struct {
	AccountsType AccountsType `json:"accountsType"`
	Length       uint8        `json:"length"`
}

func (obj RemainingAccountsSlice) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AccountsType`:
	{
		err := EncodeAccountsType(encoder, obj.AccountsType)
		if err != nil {
			return errors.NewField("AccountsType", err)
		}
	}
	// Serialize `Length`:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return errors.NewField("Length", err)
	}
	return nil
}

func (obj RemainingAccountsSlice) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemainingAccountsSlice: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemainingAccountsSlice) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AccountsType`:
	{
		var err error
		obj.AccountsType, err = DecodeAccountsType(decoder)
		if err != nil {
			return err
		}
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return errors.NewField("Length", err)
	}
	return nil
}

func (obj *RemainingAccountsSlice) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemainingAccountsSlice: %w", err)
	}
	return nil
}

func UnmarshalRemainingAccountsSlice(buf []byte) (*RemainingAccountsSlice, error) {
	obj := new(RemainingAccountsSlice)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidity struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	From        solanago.PublicKey `json:"from"`
	Position    solanago.PublicKey `json:"position"`
	Amounts     [2]uint64          `json:"amounts"`
	ActiveBinId int32              `json:"activeBinId"`
}

func (obj RemoveLiquidity) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `From`:
	err = encoder.Encode(obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Amounts`:
	err = encoder.Encode(obj.Amounts)
	if err != nil {
		return errors.NewField("Amounts", err)
	}
	// Serialize `ActiveBinId`:
	err = encoder.Encode(obj.ActiveBinId)
	if err != nil {
		return errors.NewField("ActiveBinId", err)
	}
	return nil
}

func (obj RemoveLiquidity) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidity: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidity) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Amounts`:
	err = decoder.Decode(&obj.Amounts)
	if err != nil {
		return errors.NewField("Amounts", err)
	}
	// Deserialize `ActiveBinId`:
	err = decoder.Decode(&obj.ActiveBinId)
	if err != nil {
		return errors.NewField("ActiveBinId", err)
	}
	return nil
}

func (obj *RemoveLiquidity) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidity: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidity(buf []byte) (*RemoveLiquidity, error) {
	obj := new(RemoveLiquidity)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidityParams struct {
	MinBinId *int32    `bin:"optional" json:"minBinId,omitempty"`
	MaxBinId *int32    `bin:"optional" json:"maxBinId,omitempty"`
	Bps      uint16    `json:"bps"`
	Padding  [16]uint8 `json:"padding"`
}

func (obj RemoveLiquidityParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MinBinId` (optional):
	{
		if obj.MinBinId == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MinBinId", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MinBinId", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MinBinId)
			if err != nil {
				return errors.NewField("MinBinId", err)
			}
		}
	}
	// Serialize `MaxBinId` (optional):
	{
		if obj.MaxBinId == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MaxBinId", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MaxBinId", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MaxBinId)
			if err != nil {
				return errors.NewField("MaxBinId", err)
			}
		}
	}
	// Serialize `Bps`:
	err = encoder.Encode(obj.Bps)
	if err != nil {
		return errors.NewField("Bps", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj RemoveLiquidityParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidityParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidityParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MinBinId` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MinBinId", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MinBinId)
			if err != nil {
				return errors.NewField("MinBinId", err)
			}
		}
	}
	// Deserialize `MaxBinId` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MaxBinId", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MaxBinId)
			if err != nil {
				return errors.NewField("MaxBinId", err)
			}
		}
	}
	// Deserialize `Bps`:
	err = decoder.Decode(&obj.Bps)
	if err != nil {
		return errors.NewField("Bps", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *RemoveLiquidityParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidityParams: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidityParams(buf []byte) (*RemoveLiquidityParams, error) {
	obj := new(RemoveLiquidityParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Side of resize, 0 for lower and 1 for upper
type ResizeSide binary.BorshEnum

const (
	ResizeSide_Lower ResizeSide = iota
	ResizeSide_Upper
)

func (value ResizeSide) String() string {
	switch value {
	case ResizeSide_Lower:
		return "Lower"
	case ResizeSide_Upper:
		return "Upper"
	default:
		return ""
	}
}

// Stores the state relevant for tracking liquidity mining rewards
type RewardInfo struct {
	// Reward token mint.
	Mint solanago.PublicKey `json:"mint"`

	// Reward vault token account.
	Vault solanago.PublicKey `json:"vault"`

	// Authority account that allows to fund rewards
	Funder solanago.PublicKey `json:"funder"`

	// TODO check whether we need to store it in pool
	RewardDuration uint64 `json:"rewardDuration"`

	// TODO check whether we need to store it in pool
	RewardDurationEnd uint64 `json:"rewardDurationEnd"`

	// TODO check whether we need to store it in pool
	RewardRate binary.Uint128 `json:"rewardRate"`

	// The last time reward states were updated.
	LastUpdateTime uint64 `json:"lastUpdateTime"`

	// Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window.
	CumulativeSecondsWithEmptyLiquidityReward uint64 `json:"cumulativeSecondsWithEmptyLiquidityReward"`
}

func (obj RewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `Vault`:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Serialize `Funder`:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Serialize `RewardDuration`:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	// Serialize `RewardDurationEnd`:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return errors.NewField("RewardDurationEnd", err)
	}
	// Serialize `RewardRate`:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return errors.NewField("RewardRate", err)
	}
	// Serialize `LastUpdateTime`:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return errors.NewField("LastUpdateTime", err)
	}
	// Serialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = encoder.Encode(obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return errors.NewField("CumulativeSecondsWithEmptyLiquidityReward", err)
	}
	return nil
}

func (obj RewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return errors.NewField("Funder", err)
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return errors.NewField("RewardDuration", err)
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return errors.NewField("RewardDurationEnd", err)
	}
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return errors.NewField("RewardRate", err)
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return errors.NewField("LastUpdateTime", err)
	}
	// Deserialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = decoder.Decode(&obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return errors.NewField("CumulativeSecondsWithEmptyLiquidityReward", err)
	}
	return nil
}

func (obj *RewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RewardInfo: %w", err)
	}
	return nil
}

func UnmarshalRewardInfo(buf []byte) (*RewardInfo, error) {
	obj := new(RewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Rounding binary.BorshEnum

const (
	Rounding_Up Rounding = iota
	Rounding_Down
)

func (value Rounding) String() string {
	switch value {
	case Rounding_Up:
		return "Up"
	case Rounding_Down:
		return "Down"
	default:
		return ""
	}
}

// Parameter that set by the protocol
type StaticParameters struct {
	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16 `json:"baseFactor"`

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16 `json:"filterPeriod"`

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16 `json:"decayPeriod"`

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16 `json:"reductionFactor"`

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32 `json:"variableFeeControl"`

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32 `json:"maxVolatilityAccumulator"`

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32 `json:"minBinId"`

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32 `json:"maxBinId"`

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16 `json:"protocolShare"`

	// Base fee power factor
	BaseFeePowerFactor uint8 `json:"baseFeePowerFactor"`

	// Padding for bytemuck safe alignment
	Padding [5]uint8 `json:"padding"`
}

func (obj StaticParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `BaseFactor`:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Serialize `FilterPeriod`:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Serialize `DecayPeriod`:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Serialize `ReductionFactor`:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Serialize `VariableFeeControl`:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Serialize `MaxVolatilityAccumulator`:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Serialize `MinBinId`:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return errors.NewField("MinBinId", err)
	}
	// Serialize `MaxBinId`:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return errors.NewField("MaxBinId", err)
	}
	// Serialize `ProtocolShare`:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Serialize `BaseFeePowerFactor`:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj StaticParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding StaticParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *StaticParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return errors.NewField("BaseFactor", err)
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return errors.NewField("FilterPeriod", err)
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return errors.NewField("DecayPeriod", err)
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return errors.NewField("ReductionFactor", err)
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return errors.NewField("VariableFeeControl", err)
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return errors.NewField("MaxVolatilityAccumulator", err)
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return errors.NewField("MinBinId", err)
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return errors.NewField("MaxBinId", err)
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return errors.NewField("ProtocolShare", err)
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return errors.NewField("BaseFeePowerFactor", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *StaticParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling StaticParameters: %w", err)
	}
	return nil
}

func UnmarshalStaticParameters(buf []byte) (*StaticParameters, error) {
	obj := new(StaticParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type StrategyParameters struct {
	// min bin id
	MinBinId int32 `json:"minBinId"`

	// max bin id
	MaxBinId int32 `json:"maxBinId"`

	// strategy type
	StrategyType StrategyType `json:"strategyType"`

	// parameters
	Parameteres [64]uint8 `json:"parameteres"`
}

func (obj StrategyParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MinBinId`:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return errors.NewField("MinBinId", err)
	}
	// Serialize `MaxBinId`:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return errors.NewField("MaxBinId", err)
	}
	// Serialize `StrategyType`:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return errors.NewField("StrategyType", err)
	}
	// Serialize `Parameteres`:
	err = encoder.Encode(obj.Parameteres)
	if err != nil {
		return errors.NewField("Parameteres", err)
	}
	return nil
}

func (obj StrategyParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding StrategyParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *StrategyParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return errors.NewField("MinBinId", err)
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return errors.NewField("MaxBinId", err)
	}
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return errors.NewField("StrategyType", err)
	}
	// Deserialize `Parameteres`:
	err = decoder.Decode(&obj.Parameteres)
	if err != nil {
		return errors.NewField("Parameteres", err)
	}
	return nil
}

func (obj *StrategyParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling StrategyParameters: %w", err)
	}
	return nil
}

func UnmarshalStrategyParameters(buf []byte) (*StrategyParameters, error) {
	obj := new(StrategyParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type StrategyType binary.BorshEnum

const (
	StrategyType_SpotOneSide StrategyType = iota
	StrategyType_CurveOneSide
	StrategyType_BidAskOneSide
	StrategyType_SpotBalanced
	StrategyType_CurveBalanced
	StrategyType_BidAskBalanced
	StrategyType_SpotImBalanced
	StrategyType_CurveImBalanced
	StrategyType_BidAskImBalanced
)

func (value StrategyType) String() string {
	switch value {
	case StrategyType_SpotOneSide:
		return "SpotOneSide"
	case StrategyType_CurveOneSide:
		return "CurveOneSide"
	case StrategyType_BidAskOneSide:
		return "BidAskOneSide"
	case StrategyType_SpotBalanced:
		return "SpotBalanced"
	case StrategyType_CurveBalanced:
		return "CurveBalanced"
	case StrategyType_BidAskBalanced:
		return "BidAskBalanced"
	case StrategyType_SpotImBalanced:
		return "SpotImBalanced"
	case StrategyType_CurveImBalanced:
		return "CurveImBalanced"
	case StrategyType_BidAskImBalanced:
		return "BidAskImBalanced"
	default:
		return ""
	}
}

type Swap struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	From        solanago.PublicKey `json:"from"`
	StartBinId  int32              `json:"startBinId"`
	EndBinId    int32              `json:"endBinId"`
	AmountIn    uint64             `json:"amountIn"`
	AmountOut   uint64             `json:"amountOut"`
	SwapForY    bool               `json:"swapForY"`
	Fee         uint64             `json:"fee"`
	ProtocolFee uint64             `json:"protocolFee"`
	FeeBps      binary.Uint128     `json:"feeBps"`
	HostFee     uint64             `json:"hostFee"`
}

func (obj Swap) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `From`:
	err = encoder.Encode(obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Serialize `StartBinId`:
	err = encoder.Encode(obj.StartBinId)
	if err != nil {
		return errors.NewField("StartBinId", err)
	}
	// Serialize `EndBinId`:
	err = encoder.Encode(obj.EndBinId)
	if err != nil {
		return errors.NewField("EndBinId", err)
	}
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `AmountOut`:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Serialize `SwapForY`:
	err = encoder.Encode(obj.SwapForY)
	if err != nil {
		return errors.NewField("SwapForY", err)
	}
	// Serialize `Fee`:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Serialize `ProtocolFee`:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Serialize `FeeBps`:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Serialize `HostFee`:
	err = encoder.Encode(obj.HostFee)
	if err != nil {
		return errors.NewField("HostFee", err)
	}
	return nil
}

func (obj Swap) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Swap: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Swap) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return errors.NewField("From", err)
	}
	// Deserialize `StartBinId`:
	err = decoder.Decode(&obj.StartBinId)
	if err != nil {
		return errors.NewField("StartBinId", err)
	}
	// Deserialize `EndBinId`:
	err = decoder.Decode(&obj.EndBinId)
	if err != nil {
		return errors.NewField("EndBinId", err)
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Deserialize `SwapForY`:
	err = decoder.Decode(&obj.SwapForY)
	if err != nil {
		return errors.NewField("SwapForY", err)
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Deserialize `HostFee`:
	err = decoder.Decode(&obj.HostFee)
	if err != nil {
		return errors.NewField("HostFee", err)
	}
	return nil
}

func (obj *Swap) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Swap: %w", err)
	}
	return nil
}

func UnmarshalSwap(buf []byte) (*Swap, error) {
	obj := new(Swap)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Parameter that set by the protocol
type TokenBadge struct {
	// token mint
	TokenMint solanago.PublicKey `json:"tokenMint"`

	// Reserve
	Padding [128]uint8 `json:"padding"`
}

func (obj TokenBadge) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenMint`:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj TokenBadge) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenBadge: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenBadge) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return errors.NewField("TokenMint", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *TokenBadge) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenBadge: %w", err)
	}
	return nil
}

func UnmarshalTokenBadge(buf []byte) (*TokenBadge, error) {
	obj := new(TokenBadge)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TokenProgramFlags binary.BorshEnum

const (
	TokenProgramFlags_TokenProgram TokenProgramFlags = iota
	TokenProgramFlags_TokenProgram2022
)

func (value TokenProgramFlags) String() string {
	switch value {
	case TokenProgramFlags_TokenProgram:
		return "TokenProgram"
	case TokenProgramFlags_TokenProgram2022:
		return "TokenProgram2022"
	default:
		return ""
	}
}

type UpdatePositionLockReleasePoint struct {
	Position            solanago.PublicKey `json:"position"`
	CurrentPoint        uint64             `json:"currentPoint"`
	NewLockReleasePoint uint64             `json:"newLockReleasePoint"`
	OldLockReleasePoint uint64             `json:"oldLockReleasePoint"`
	Sender              solanago.PublicKey `json:"sender"`
}

func (obj UpdatePositionLockReleasePoint) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `CurrentPoint`:
	err = encoder.Encode(obj.CurrentPoint)
	if err != nil {
		return errors.NewField("CurrentPoint", err)
	}
	// Serialize `NewLockReleasePoint`:
	err = encoder.Encode(obj.NewLockReleasePoint)
	if err != nil {
		return errors.NewField("NewLockReleasePoint", err)
	}
	// Serialize `OldLockReleasePoint`:
	err = encoder.Encode(obj.OldLockReleasePoint)
	if err != nil {
		return errors.NewField("OldLockReleasePoint", err)
	}
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	return nil
}

func (obj UpdatePositionLockReleasePoint) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdatePositionLockReleasePoint: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdatePositionLockReleasePoint) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `CurrentPoint`:
	err = decoder.Decode(&obj.CurrentPoint)
	if err != nil {
		return errors.NewField("CurrentPoint", err)
	}
	// Deserialize `NewLockReleasePoint`:
	err = decoder.Decode(&obj.NewLockReleasePoint)
	if err != nil {
		return errors.NewField("NewLockReleasePoint", err)
	}
	// Deserialize `OldLockReleasePoint`:
	err = decoder.Decode(&obj.OldLockReleasePoint)
	if err != nil {
		return errors.NewField("OldLockReleasePoint", err)
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	return nil
}

func (obj *UpdatePositionLockReleasePoint) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdatePositionLockReleasePoint: %w", err)
	}
	return nil
}

func UnmarshalUpdatePositionLockReleasePoint(buf []byte) (*UpdatePositionLockReleasePoint, error) {
	obj := new(UpdatePositionLockReleasePoint)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UpdatePositionOperator struct {
	Position    solanago.PublicKey `json:"position"`
	OldOperator solanago.PublicKey `json:"oldOperator"`
	NewOperator solanago.PublicKey `json:"newOperator"`
}

func (obj UpdatePositionOperator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `OldOperator`:
	err = encoder.Encode(obj.OldOperator)
	if err != nil {
		return errors.NewField("OldOperator", err)
	}
	// Serialize `NewOperator`:
	err = encoder.Encode(obj.NewOperator)
	if err != nil {
		return errors.NewField("NewOperator", err)
	}
	return nil
}

func (obj UpdatePositionOperator) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdatePositionOperator: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdatePositionOperator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `OldOperator`:
	err = decoder.Decode(&obj.OldOperator)
	if err != nil {
		return errors.NewField("OldOperator", err)
	}
	// Deserialize `NewOperator`:
	err = decoder.Decode(&obj.NewOperator)
	if err != nil {
		return errors.NewField("NewOperator", err)
	}
	return nil
}

func (obj *UpdatePositionOperator) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdatePositionOperator: %w", err)
	}
	return nil
}

func UnmarshalUpdatePositionOperator(buf []byte) (*UpdatePositionOperator, error) {
	obj := new(UpdatePositionOperator)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UpdateRewardDuration struct {
	LbPair            solanago.PublicKey `json:"lbPair"`
	RewardIndex       uint64             `json:"rewardIndex"`
	OldRewardDuration uint64             `json:"oldRewardDuration"`
	NewRewardDuration uint64             `json:"newRewardDuration"`
}

func (obj UpdateRewardDuration) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `OldRewardDuration`:
	err = encoder.Encode(obj.OldRewardDuration)
	if err != nil {
		return errors.NewField("OldRewardDuration", err)
	}
	// Serialize `NewRewardDuration`:
	err = encoder.Encode(obj.NewRewardDuration)
	if err != nil {
		return errors.NewField("NewRewardDuration", err)
	}
	return nil
}

func (obj UpdateRewardDuration) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateRewardDuration: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateRewardDuration) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `OldRewardDuration`:
	err = decoder.Decode(&obj.OldRewardDuration)
	if err != nil {
		return errors.NewField("OldRewardDuration", err)
	}
	// Deserialize `NewRewardDuration`:
	err = decoder.Decode(&obj.NewRewardDuration)
	if err != nil {
		return errors.NewField("NewRewardDuration", err)
	}
	return nil
}

func (obj *UpdateRewardDuration) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateRewardDuration: %w", err)
	}
	return nil
}

func UnmarshalUpdateRewardDuration(buf []byte) (*UpdateRewardDuration, error) {
	obj := new(UpdateRewardDuration)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UpdateRewardFunder struct {
	LbPair      solanago.PublicKey `json:"lbPair"`
	RewardIndex uint64             `json:"rewardIndex"`
	OldFunder   solanago.PublicKey `json:"oldFunder"`
	NewFunder   solanago.PublicKey `json:"newFunder"`
}

func (obj UpdateRewardFunder) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `RewardIndex`:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Serialize `OldFunder`:
	err = encoder.Encode(obj.OldFunder)
	if err != nil {
		return errors.NewField("OldFunder", err)
	}
	// Serialize `NewFunder`:
	err = encoder.Encode(obj.NewFunder)
	if err != nil {
		return errors.NewField("NewFunder", err)
	}
	return nil
}

func (obj UpdateRewardFunder) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateRewardFunder: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateRewardFunder) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return errors.NewField("RewardIndex", err)
	}
	// Deserialize `OldFunder`:
	err = decoder.Decode(&obj.OldFunder)
	if err != nil {
		return errors.NewField("OldFunder", err)
	}
	// Deserialize `NewFunder`:
	err = decoder.Decode(&obj.NewFunder)
	if err != nil {
		return errors.NewField("NewFunder", err)
	}
	return nil
}

func (obj *UpdateRewardFunder) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateRewardFunder: %w", err)
	}
	return nil
}

func UnmarshalUpdateRewardFunder(buf []byte) (*UpdateRewardFunder, error) {
	obj := new(UpdateRewardFunder)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UserRewardInfo struct {
	RewardPerTokenCompletes [2]binary.Uint128 `json:"rewardPerTokenCompletes"`
	RewardPendings          [2]uint64         `json:"rewardPendings"`
}

func (obj UserRewardInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RewardPerTokenCompletes`:
	err = encoder.Encode(obj.RewardPerTokenCompletes)
	if err != nil {
		return errors.NewField("RewardPerTokenCompletes", err)
	}
	// Serialize `RewardPendings`:
	err = encoder.Encode(obj.RewardPendings)
	if err != nil {
		return errors.NewField("RewardPendings", err)
	}
	return nil
}

func (obj UserRewardInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserRewardInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserRewardInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardPerTokenCompletes`:
	err = decoder.Decode(&obj.RewardPerTokenCompletes)
	if err != nil {
		return errors.NewField("RewardPerTokenCompletes", err)
	}
	// Deserialize `RewardPendings`:
	err = decoder.Decode(&obj.RewardPendings)
	if err != nil {
		return errors.NewField("RewardPendings", err)
	}
	return nil
}

func (obj *UserRewardInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserRewardInfo: %w", err)
	}
	return nil
}

func UnmarshalUserRewardInfo(buf []byte) (*UserRewardInfo, error) {
	obj := new(UserRewardInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Parameters that changes based on dynamic of the market
type VariableParameters struct {
	// Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.
	// It affects the variable fee rate
	VolatilityAccumulator uint32 `json:"volatilityAccumulator"`

	// Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator
	VolatilityReference uint32 `json:"volatilityReference"`

	// Active bin id of last swap.
	IndexReference int32 `json:"indexReference"`

	// Padding for bytemuck safe alignment
	Padding [4]uint8 `json:"padding"`

	// Last timestamp the variable parameters was updated
	LastUpdateTimestamp int64 `json:"lastUpdateTimestamp"`

	// Padding for bytemuck safe alignment
	Padding1 [8]uint8 `json:"padding1"`
}

func (obj VariableParameters) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `VolatilityAccumulator`:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return errors.NewField("VolatilityAccumulator", err)
	}
	// Serialize `VolatilityReference`:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return errors.NewField("VolatilityReference", err)
	}
	// Serialize `IndexReference`:
	err = encoder.Encode(obj.IndexReference)
	if err != nil {
		return errors.NewField("IndexReference", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `LastUpdateTimestamp`:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return errors.NewField("LastUpdateTimestamp", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj VariableParameters) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VariableParameters: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VariableParameters) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return errors.NewField("VolatilityAccumulator", err)
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return errors.NewField("VolatilityReference", err)
	}
	// Deserialize `IndexReference`:
	err = decoder.Decode(&obj.IndexReference)
	if err != nil {
		return errors.NewField("IndexReference", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return errors.NewField("LastUpdateTimestamp", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	return nil
}

func (obj *VariableParameters) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VariableParameters: %w", err)
	}
	return nil
}

func UnmarshalVariableParameters(buf []byte) (*VariableParameters, error) {
	obj := new(VariableParameters)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type WithdrawIneligibleReward struct {
	LbPair     solanago.PublicKey `json:"lbPair"`
	RewardMint solanago.PublicKey `json:"rewardMint"`
	Amount     uint64             `json:"amount"`
}

func (obj WithdrawIneligibleReward) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LbPair`:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Serialize `RewardMint`:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj WithdrawIneligibleReward) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WithdrawIneligibleReward: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WithdrawIneligibleReward) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return errors.NewField("LbPair", err)
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return errors.NewField("RewardMint", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *WithdrawIneligibleReward) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawIneligibleReward: %w", err)
	}
	return nil
}

func UnmarshalWithdrawIneligibleReward(buf []byte) (*WithdrawIneligibleReward, error) {
	obj := new(WithdrawIneligibleReward)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
