// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package lb_clmm

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AddLiquidity:
		value := new(AddLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AddLiquidity: %w", err)
		}
		return value, nil
	case Event_ClaimFee:
		value := new(ClaimFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClaimFee: %w", err)
		}
		return value, nil
	case Event_ClaimReward:
		value := new(ClaimReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClaimReward: %w", err)
		}
		return value, nil
	case Event_CompositionFee:
		value := new(CompositionFee)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CompositionFee: %w", err)
		}
		return value, nil
	case Event_DecreasePositionLength:
		value := new(DecreasePositionLength)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DecreasePositionLength: %w", err)
		}
		return value, nil
	case Event_DynamicFeeParameterUpdate:
		value := new(DynamicFeeParameterUpdate)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DynamicFeeParameterUpdate: %w", err)
		}
		return value, nil
	case Event_FeeParameterUpdate:
		value := new(FeeParameterUpdate)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as FeeParameterUpdate: %w", err)
		}
		return value, nil
	case Event_FundReward:
		value := new(FundReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as FundReward: %w", err)
		}
		return value, nil
	case Event_GoToABin:
		value := new(GoToABin)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GoToABin: %w", err)
		}
		return value, nil
	case Event_IncreaseObservation:
		value := new(IncreaseObservation)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as IncreaseObservation: %w", err)
		}
		return value, nil
	case Event_IncreasePositionLength:
		value := new(IncreasePositionLength)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as IncreasePositionLength: %w", err)
		}
		return value, nil
	case Event_InitializeReward:
		value := new(InitializeReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InitializeReward: %w", err)
		}
		return value, nil
	case Event_LbPairCreate:
		value := new(LbPairCreate)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LbPairCreate: %w", err)
		}
		return value, nil
	case Event_PositionClose:
		value := new(PositionClose)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PositionClose: %w", err)
		}
		return value, nil
	case Event_PositionCreate:
		value := new(PositionCreate)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PositionCreate: %w", err)
		}
		return value, nil
	case Event_Rebalancing:
		value := new(Rebalancing)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as Rebalancing: %w", err)
		}
		return value, nil
	case Event_RemoveLiquidity:
		value := new(RemoveLiquidity)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as RemoveLiquidity: %w", err)
		}
		return value, nil
	case Event_Swap:
		value := new(Swap)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as Swap: %w", err)
		}
		return value, nil
	case Event_UpdatePositionLockReleasePoint:
		value := new(UpdatePositionLockReleasePoint)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as UpdatePositionLockReleasePoint: %w", err)
		}
		return value, nil
	case Event_UpdatePositionOperator:
		value := new(UpdatePositionOperator)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as UpdatePositionOperator: %w", err)
		}
		return value, nil
	case Event_UpdateRewardDuration:
		value := new(UpdateRewardDuration)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as UpdateRewardDuration: %w", err)
		}
		return value, nil
	case Event_UpdateRewardFunder:
		value := new(UpdateRewardFunder)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as UpdateRewardFunder: %w", err)
		}
		return value, nil
	case Event_WithdrawIneligibleReward:
		value := new(WithdrawIneligibleReward)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as WithdrawIneligibleReward: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AddLiquidity(eventData []byte) (*AddLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AddLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AddLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(AddLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AddLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_ClaimFee(eventData []byte) (*ClaimFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClaimFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClaimFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClaimFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClaimFee: %w", err)
	}
	return event, nil
}

func ParseEvent_ClaimReward(eventData []byte) (*ClaimReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClaimReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClaimReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClaimReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClaimReward: %w", err)
	}
	return event, nil
}

func ParseEvent_CompositionFee(eventData []byte) (*CompositionFee, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CompositionFee {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CompositionFee, binary.FormatDiscriminator(discriminator))
	}
	event := new(CompositionFee)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CompositionFee: %w", err)
	}
	return event, nil
}

func ParseEvent_DecreasePositionLength(eventData []byte) (*DecreasePositionLength, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DecreasePositionLength {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DecreasePositionLength, binary.FormatDiscriminator(discriminator))
	}
	event := new(DecreasePositionLength)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DecreasePositionLength: %w", err)
	}
	return event, nil
}

func ParseEvent_DynamicFeeParameterUpdate(eventData []byte) (*DynamicFeeParameterUpdate, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DynamicFeeParameterUpdate {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DynamicFeeParameterUpdate, binary.FormatDiscriminator(discriminator))
	}
	event := new(DynamicFeeParameterUpdate)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DynamicFeeParameterUpdate: %w", err)
	}
	return event, nil
}

func ParseEvent_FeeParameterUpdate(eventData []byte) (*FeeParameterUpdate, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_FeeParameterUpdate {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_FeeParameterUpdate, binary.FormatDiscriminator(discriminator))
	}
	event := new(FeeParameterUpdate)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type FeeParameterUpdate: %w", err)
	}
	return event, nil
}

func ParseEvent_FundReward(eventData []byte) (*FundReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_FundReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_FundReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(FundReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type FundReward: %w", err)
	}
	return event, nil
}

func ParseEvent_GoToABin(eventData []byte) (*GoToABin, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GoToABin {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GoToABin, binary.FormatDiscriminator(discriminator))
	}
	event := new(GoToABin)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GoToABin: %w", err)
	}
	return event, nil
}

func ParseEvent_IncreaseObservation(eventData []byte) (*IncreaseObservation, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_IncreaseObservation {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_IncreaseObservation, binary.FormatDiscriminator(discriminator))
	}
	event := new(IncreaseObservation)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type IncreaseObservation: %w", err)
	}
	return event, nil
}

func ParseEvent_IncreasePositionLength(eventData []byte) (*IncreasePositionLength, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_IncreasePositionLength {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_IncreasePositionLength, binary.FormatDiscriminator(discriminator))
	}
	event := new(IncreasePositionLength)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type IncreasePositionLength: %w", err)
	}
	return event, nil
}

func ParseEvent_InitializeReward(eventData []byte) (*InitializeReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InitializeReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InitializeReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(InitializeReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InitializeReward: %w", err)
	}
	return event, nil
}

func ParseEvent_LbPairCreate(eventData []byte) (*LbPairCreate, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LbPairCreate {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LbPairCreate, binary.FormatDiscriminator(discriminator))
	}
	event := new(LbPairCreate)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LbPairCreate: %w", err)
	}
	return event, nil
}

func ParseEvent_PositionClose(eventData []byte) (*PositionClose, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PositionClose {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PositionClose, binary.FormatDiscriminator(discriminator))
	}
	event := new(PositionClose)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PositionClose: %w", err)
	}
	return event, nil
}

func ParseEvent_PositionCreate(eventData []byte) (*PositionCreate, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PositionCreate {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PositionCreate, binary.FormatDiscriminator(discriminator))
	}
	event := new(PositionCreate)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PositionCreate: %w", err)
	}
	return event, nil
}

func ParseEvent_Rebalancing(eventData []byte) (*Rebalancing, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_Rebalancing {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_Rebalancing, binary.FormatDiscriminator(discriminator))
	}
	event := new(Rebalancing)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type Rebalancing: %w", err)
	}
	return event, nil
}

func ParseEvent_RemoveLiquidity(eventData []byte) (*RemoveLiquidity, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_RemoveLiquidity {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_RemoveLiquidity, binary.FormatDiscriminator(discriminator))
	}
	event := new(RemoveLiquidity)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type RemoveLiquidity: %w", err)
	}
	return event, nil
}

func ParseEvent_Swap(eventData []byte) (*Swap, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_Swap {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_Swap, binary.FormatDiscriminator(discriminator))
	}
	event := new(Swap)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type Swap: %w", err)
	}
	return event, nil
}

func ParseEvent_UpdatePositionLockReleasePoint(eventData []byte) (*UpdatePositionLockReleasePoint, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_UpdatePositionLockReleasePoint {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_UpdatePositionLockReleasePoint, binary.FormatDiscriminator(discriminator))
	}
	event := new(UpdatePositionLockReleasePoint)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type UpdatePositionLockReleasePoint: %w", err)
	}
	return event, nil
}

func ParseEvent_UpdatePositionOperator(eventData []byte) (*UpdatePositionOperator, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_UpdatePositionOperator {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_UpdatePositionOperator, binary.FormatDiscriminator(discriminator))
	}
	event := new(UpdatePositionOperator)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type UpdatePositionOperator: %w", err)
	}
	return event, nil
}

func ParseEvent_UpdateRewardDuration(eventData []byte) (*UpdateRewardDuration, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_UpdateRewardDuration {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_UpdateRewardDuration, binary.FormatDiscriminator(discriminator))
	}
	event := new(UpdateRewardDuration)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type UpdateRewardDuration: %w", err)
	}
	return event, nil
}

func ParseEvent_UpdateRewardFunder(eventData []byte) (*UpdateRewardFunder, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_UpdateRewardFunder {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_UpdateRewardFunder, binary.FormatDiscriminator(discriminator))
	}
	event := new(UpdateRewardFunder)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type UpdateRewardFunder: %w", err)
	}
	return event, nil
}

func ParseEvent_WithdrawIneligibleReward(eventData []byte) (*WithdrawIneligibleReward, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_WithdrawIneligibleReward {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_WithdrawIneligibleReward, binary.FormatDiscriminator(discriminator))
	}
	event := new(WithdrawIneligibleReward)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type WithdrawIneligibleReward: %w", err)
	}
	return event, nil
}
